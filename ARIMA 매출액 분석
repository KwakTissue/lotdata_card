{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"ARIMA 매출액 분석","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyPQz0uJoYahTX4LfvRUdD4R"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"gd2KxAcLdUjv","executionInfo":{"status":"ok","timestamp":1660296197131,"user_tz":-540,"elapsed":23683,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"8c67256a-1e77-4374-f50c-1eb161cc9a46"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["import numpy as np\n","import pandas as pd\n","import seaborn as sns\n","import matplotlib.pyplot as plt\n","from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","source":["data = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/롯데멤버스/data_ldt.csv')\n","data"],"metadata":{"id":"45t1_M8FeF4r","executionInfo":{"status":"ok","timestamp":1660298643297,"user_tz":-540,"elapsed":468,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"colab":{"base_uri":"https://localhost:8080/","height":424},"outputId":"2eb6aa16-737f-4afe-900c-76734a7b0895"},"execution_count":4,"outputs":[{"output_type":"execute_result","data":{"text/plain":["        de_dt     1buy_am      2buy_am      3buy_am     4buy_am\n","0    20210101   2009924.0   59525052.0   36918461.0  27670176.0\n","1    20210102  80378184.0  201544701.0  123680516.0  65428203.0\n","2    20210103  55256040.0  259324025.0   83412836.0  51969332.0\n","3    20210104  16001680.0  113496679.0   39870371.0  47443038.0\n","4    20210105  11221770.0   83658632.0   37814296.0  30153717.0\n","..        ...         ...          ...          ...         ...\n","360  20211227   7363476.0   85212049.0   45384858.0  38674094.0\n","361  20211228  45381582.0   95648817.0   47598408.0  27241155.0\n","362  20211229  33313040.0   78726685.0   44316710.0  33435653.0\n","363  20211230  29565301.0   90701196.0   40382175.0  37601330.0\n","364  20211231  19992250.0  166661354.0   93412831.0  42927735.0\n","\n","[365 rows x 5 columns]"],"text/html":["\n","  <div id=\"df-28c466df-9aa2-4530-8a66-c8b6ef7bc216\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>de_dt</th>\n","      <th>1buy_am</th>\n","      <th>2buy_am</th>\n","      <th>3buy_am</th>\n","      <th>4buy_am</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>20210101</td>\n","      <td>2009924.0</td>\n","      <td>59525052.0</td>\n","      <td>36918461.0</td>\n","      <td>27670176.0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>20210102</td>\n","      <td>80378184.0</td>\n","      <td>201544701.0</td>\n","      <td>123680516.0</td>\n","      <td>65428203.0</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>20210103</td>\n","      <td>55256040.0</td>\n","      <td>259324025.0</td>\n","      <td>83412836.0</td>\n","      <td>51969332.0</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>20210104</td>\n","      <td>16001680.0</td>\n","      <td>113496679.0</td>\n","      <td>39870371.0</td>\n","      <td>47443038.0</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>20210105</td>\n","      <td>11221770.0</td>\n","      <td>83658632.0</td>\n","      <td>37814296.0</td>\n","      <td>30153717.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>360</th>\n","      <td>20211227</td>\n","      <td>7363476.0</td>\n","      <td>85212049.0</td>\n","      <td>45384858.0</td>\n","      <td>38674094.0</td>\n","    </tr>\n","    <tr>\n","      <th>361</th>\n","      <td>20211228</td>\n","      <td>45381582.0</td>\n","      <td>95648817.0</td>\n","      <td>47598408.0</td>\n","      <td>27241155.0</td>\n","    </tr>\n","    <tr>\n","      <th>362</th>\n","      <td>20211229</td>\n","      <td>33313040.0</td>\n","      <td>78726685.0</td>\n","      <td>44316710.0</td>\n","      <td>33435653.0</td>\n","    </tr>\n","    <tr>\n","      <th>363</th>\n","      <td>20211230</td>\n","      <td>29565301.0</td>\n","      <td>90701196.0</td>\n","      <td>40382175.0</td>\n","      <td>37601330.0</td>\n","    </tr>\n","    <tr>\n","      <th>364</th>\n","      <td>20211231</td>\n","      <td>19992250.0</td>\n","      <td>166661354.0</td>\n","      <td>93412831.0</td>\n","      <td>42927735.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>365 rows × 5 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-28c466df-9aa2-4530-8a66-c8b6ef7bc216')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-28c466df-9aa2-4530-8a66-c8b6ef7bc216 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-28c466df-9aa2-4530-8a66-c8b6ef7bc216');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":4}]},{"cell_type":"code","source":["data['de_dt'] = pd.to_datetime(data['de_dt'],format='%Y%m%d')\n","data = data.set_index('de_dt',drop=True)\n","data.columns = [0,1,2,3]\n","data"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":455},"id":"ArhiexYeeq8A","executionInfo":{"status":"ok","timestamp":1660298643941,"user_tz":-540,"elapsed":9,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"ec621ec6-7eae-4cb1-bf3b-d97a3d1936ba"},"execution_count":5,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                     0            1            2           3\n","de_dt                                                       \n","2021-01-01   2009924.0   59525052.0   36918461.0  27670176.0\n","2021-01-02  80378184.0  201544701.0  123680516.0  65428203.0\n","2021-01-03  55256040.0  259324025.0   83412836.0  51969332.0\n","2021-01-04  16001680.0  113496679.0   39870371.0  47443038.0\n","2021-01-05  11221770.0   83658632.0   37814296.0  30153717.0\n","...                ...          ...          ...         ...\n","2021-12-27   7363476.0   85212049.0   45384858.0  38674094.0\n","2021-12-28  45381582.0   95648817.0   47598408.0  27241155.0\n","2021-12-29  33313040.0   78726685.0   44316710.0  33435653.0\n","2021-12-30  29565301.0   90701196.0   40382175.0  37601330.0\n","2021-12-31  19992250.0  166661354.0   93412831.0  42927735.0\n","\n","[365 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-3bc13d79-8abe-4b67-a121-c48584391d2d\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","    </tr>\n","    <tr>\n","      <th>de_dt</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2021-01-01</th>\n","      <td>2009924.0</td>\n","      <td>59525052.0</td>\n","      <td>36918461.0</td>\n","      <td>27670176.0</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-02</th>\n","      <td>80378184.0</td>\n","      <td>201544701.0</td>\n","      <td>123680516.0</td>\n","      <td>65428203.0</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-03</th>\n","      <td>55256040.0</td>\n","      <td>259324025.0</td>\n","      <td>83412836.0</td>\n","      <td>51969332.0</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-04</th>\n","      <td>16001680.0</td>\n","      <td>113496679.0</td>\n","      <td>39870371.0</td>\n","      <td>47443038.0</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-05</th>\n","      <td>11221770.0</td>\n","      <td>83658632.0</td>\n","      <td>37814296.0</td>\n","      <td>30153717.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-27</th>\n","      <td>7363476.0</td>\n","      <td>85212049.0</td>\n","      <td>45384858.0</td>\n","      <td>38674094.0</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-28</th>\n","      <td>45381582.0</td>\n","      <td>95648817.0</td>\n","      <td>47598408.0</td>\n","      <td>27241155.0</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-29</th>\n","      <td>33313040.0</td>\n","      <td>78726685.0</td>\n","      <td>44316710.0</td>\n","      <td>33435653.0</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-30</th>\n","      <td>29565301.0</td>\n","      <td>90701196.0</td>\n","      <td>40382175.0</td>\n","      <td>37601330.0</td>\n","    </tr>\n","    <tr>\n","      <th>2021-12-31</th>\n","      <td>19992250.0</td>\n","      <td>166661354.0</td>\n","      <td>93412831.0</td>\n","      <td>42927735.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>365 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3bc13d79-8abe-4b67-a121-c48584391d2d')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3bc13d79-8abe-4b67-a121-c48584391d2d button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3bc13d79-8abe-4b67-a121-c48584391d2d');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":5}]},{"cell_type":"code","source":["plt.figure(figsize=(20,8))\n","data[0].plot()\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":324},"id":"2Uu69iwPhve_","executionInfo":{"status":"ok","timestamp":1660282307587,"user_tz":-540,"elapsed":1629,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"29167a14-7f50-4a11-8d6a-0b99e262f828"},"execution_count":null,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1440x576 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# sarima"],"metadata":{"id":"983sVNtnjg9x"}},{"cell_type":"markdown","source":["## parameter"],"metadata":{"id":"oPsVLQQ3mEYw"}},{"cell_type":"code","source":["from scipy.stats import norm\n","import statsmodels.api as sm\n","from tqdm import tqdm\n","import itertools\n","from statsmodels.tsa.arima_model import ARIMA"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"NF_0BqfEmXN4","executionInfo":{"status":"ok","timestamp":1660298652713,"user_tz":-540,"elapsed":1159,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"ab76bdad-61c9-427d-c8f1-412214d407b9"},"execution_count":6,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tools/_testing.py:19: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.\n","  import pandas.util.testing as tm\n"]}]},{"cell_type":"code","source":["final_params=[]\n","for column in range(4):\n","  p=d=q=range(0,2)\n","  pdq = list(itertools.product(p,d,q))\n","  seasonal_pdq = [(x[0],x[1],x[2],7) for x in list(itertools.product(p,d,q))]\n","  result_list =[]\n","  AIC = []\n","  SARIMAX_order = []\n","  for param in pdq:\n","    for param_seasonal in seasonal_pdq:\n","      try:\n","        mod = sm.tsa.statespace.SARIMAX(data[column],exog=None, order = param,\n","                                        seasonal_order = param_seasonal,\n","                                        enforce_stationarity=True,\n","                                        enforce_invertibility=True)\n","        results = mod.fit()\n","        print('ARIMA{}x{}12-AIC:{}'.format(param, param_seasonal, round(results.aic,2)))\n","        result_list.extend([param, param_seasonal, round(results.aic,2)])\n","        AIC.append(results.aic)\n","        SARIMAX_order.append([param, param_seasonal])\n","      except:\n","        print('error')\n","        continue\n","  print('The smallest AIC is {} for model SARIMAX{}x{}'.format(min(AIC), SARIMAX_order[AIC.index(min(AIC))][0],\n","                                                             SARIMAX_order[AIC.index(min(AIC))][1]))\n","  final_params.append((SARIMAX_order[AIC.index(min(AIC))][0],\n","                       SARIMAX_order[AIC.index(min(AIC))][1]))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Q0rYeuTljkZ2","executionInfo":{"status":"ok","timestamp":1660298738813,"user_tz":-540,"elapsed":84556,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"54ec0757-c665-4123-a060-bc5b30f7c902"},"execution_count":7,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(0, 0, 0, 7)12-AIC:14117.19\n","ARIMA(0, 0, 0)x(0, 0, 1, 7)12-AIC:14015.27\n","ARIMA(0, 0, 0)x(0, 1, 0, 7)12-AIC:13631.09\n","ARIMA(0, 0, 0)x(0, 1, 1, 7)12-AIC:13406.86\n","ARIMA(0, 0, 0)x(1, 0, 0, 7)12-AIC:13848.59\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 0, 1, 7)12-AIC:13672.05\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 1, 0, 7)12-AIC:13497.16\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 1, 1, 7)12-AIC:13404.24\n","ARIMA(0, 0, 1)x(0, 0, 0, 7)12-AIC:13983.53\n","ARIMA(0, 0, 1)x(0, 0, 1, 7)12-AIC:13933.68\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(0, 1, 0, 7)12-AIC:13626.88\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(0, 1, 1, 7)12-AIC:13460.92\n","ARIMA(0, 0, 1)x(1, 0, 0, 7)12-AIC:13886.89\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(1, 0, 1, 7)12-AIC:13822.67\n","ARIMA(0, 0, 1)x(1, 1, 0, 7)12-AIC:13517.96\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(1, 1, 1, 7)12-AIC:13461.96\n","ARIMA(0, 1, 0)x(0, 0, 0, 7)12-AIC:13925.69\n","ARIMA(0, 1, 0)x(0, 0, 1, 7)12-AIC:13910.02\n","ARIMA(0, 1, 0)x(0, 1, 0, 7)12-AIC:13792.21\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(0, 1, 1, 7)12-AIC:13595.52\n","ARIMA(0, 1, 0)x(1, 0, 0, 7)12-AIC:13899.13\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(1, 0, 1, 7)12-AIC:13838.35\n","ARIMA(0, 1, 0)x(1, 1, 0, 7)12-AIC:13673.15\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(1, 1, 1, 7)12-AIC:13581.92\n","ARIMA(0, 1, 1)x(0, 0, 0, 7)12-AIC:13789.55\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(0, 0, 1, 7)12-AIC:13771.07\n","ARIMA(0, 1, 1)x(0, 1, 0, 7)12-AIC:13609.09\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(0, 1, 1, 7)12-AIC:13479.22\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 0, 0, 7)12-AIC:13757.05\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 0, 1, 7)12-AIC:13701.72\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 1, 0, 7)12-AIC:13521.29\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 1, 1, 7)12-AIC:13480.01\n","ARIMA(1, 0, 0)x(0, 0, 0, 7)12-AIC:13900.27\n","ARIMA(1, 0, 0)x(0, 0, 1, 7)12-AIC:13868.5\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(0, 1, 0, 7)12-AIC:13627.34\n","ARIMA(1, 0, 0)x(0, 1, 1, 7)12-AIC:13459.84\n","ARIMA(1, 0, 0)x(1, 0, 0, 7)12-AIC:13833.29\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 0, 1, 7)12-AIC:13734.87\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 1, 0, 7)12-AIC:13517.4\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 1, 1, 7)12-AIC:13460.87\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(0, 0, 0, 7)12-AIC:13823.24\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(0, 0, 1, 7)12-AIC:13803.36\n","ARIMA(1, 0, 1)x(0, 1, 0, 7)12-AIC:13628.05\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(0, 1, 1, 7)12-AIC:13462.49\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 0, 0, 7)12-AIC:13788.56\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 0, 1, 7)12-AIC:13732.78\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 1, 0, 7)12-AIC:13518.59\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 1, 1, 7)12-AIC:13463.13\n","ARIMA(1, 1, 0)x(0, 0, 0, 7)12-AIC:13900.51\n","ARIMA(1, 1, 0)x(0, 0, 1, 7)12-AIC:13876.03\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(0, 1, 0, 7)12-AIC:13727.03\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(0, 1, 1, 7)12-AIC:13559.1\n","ARIMA(1, 1, 0)x(1, 0, 0, 7)12-AIC:13859.47\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(1, 0, 1, 7)12-AIC:13786.93\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(1, 1, 0, 7)12-AIC:13621.14\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(1, 1, 1, 7)12-AIC:13560.34\n","ARIMA(1, 1, 1)x(0, 0, 0, 7)12-AIC:13773.85\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 0, 1, 7)12-AIC:13758.07\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 1, 0, 7)12-AIC:13605.21\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 1, 1, 7)12-AIC:13477.73\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 0, 0, 7)12-AIC:13746.76\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 0, 1, 7)12-AIC:13695.14\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 1, 0, 7)12-AIC:13519.91\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 1, 1, 7)12-AIC:13478.8\n","The smallest AIC is 13404.235825227639 for model SARIMAX(0, 0, 0)x(1, 1, 1, 7)\n","ARIMA(0, 0, 0)x(0, 0, 0, 7)12-AIC:14735.37\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(0, 0, 1, 7)12-AIC:14534.09\n","ARIMA(0, 0, 0)x(0, 1, 0, 7)12-AIC:13669.55\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(0, 1, 1, 7)12-AIC:13528.03\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 0, 0, 7)12-AIC:13943.66\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 0, 1, 7)12-AIC:13782.19\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 1, 0, 7)12-AIC:13595.64\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 1, 1, 7)12-AIC:13525.59\n","ARIMA(0, 0, 1)x(0, 0, 0, 7)12-AIC:14510.62\n","ARIMA(0, 0, 1)x(0, 0, 1, 7)12-AIC:14439.63\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(0, 1, 0, 7)12-AIC:13666.18\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(0, 1, 1, 7)12-AIC:13537.08\n","ARIMA(0, 0, 1)x(1, 0, 0, 7)12-AIC:14371.53\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(1, 0, 1, 7)12-AIC:14358.27\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(1, 1, 0, 7)12-AIC:13592.13\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(1, 1, 1, 7)12-AIC:13538.25\n","ARIMA(0, 1, 0)x(0, 0, 0, 7)12-AIC:14155.96\n","ARIMA(0, 1, 0)x(0, 0, 1, 7)12-AIC:14087.67\n","ARIMA(0, 1, 0)x(0, 1, 0, 7)12-AIC:13829.15\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(0, 1, 1, 7)12-AIC:13620.29\n","ARIMA(0, 1, 0)x(1, 0, 0, 7)12-AIC:14016.22\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(1, 0, 1, 7)12-AIC:13890.34\n","ARIMA(0, 1, 0)x(1, 1, 0, 7)12-AIC:13713.77\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(1, 1, 1, 7)12-AIC:13613.13\n","ARIMA(0, 1, 1)x(0, 0, 0, 7)12-AIC:14088.79\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(0, 0, 1, 7)12-AIC:14003.5\n","ARIMA(0, 1, 1)x(0, 1, 0, 7)12-AIC:13678.67\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(0, 1, 1, 7)12-AIC:13531.24\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 0, 0, 7)12-AIC:13946.7\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 0, 1, 7)12-AIC:13903.34\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 1, 0, 7)12-AIC:13600.59\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 1, 1, 7)12-AIC:13533.04\n","ARIMA(1, 0, 0)x(0, 0, 0, 7)12-AIC:14176.82\n","ARIMA(1, 0, 0)x(0, 0, 1, 7)12-AIC:14102.42\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(0, 1, 0, 7)12-AIC:13664.82\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(0, 1, 1, 7)12-AIC:13530.91\n","ARIMA(1, 0, 0)x(1, 0, 0, 7)12-AIC:14006.53\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 0, 1, 7)12-AIC:13943.96\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 1, 0, 7)12-AIC:13588.95\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 1, 1, 7)12-AIC:13532.48\n","ARIMA(1, 0, 1)x(0, 0, 0, 7)12-AIC:14178.03\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(0, 0, 1, 7)12-AIC:14039.26\n","ARIMA(1, 0, 1)x(0, 1, 0, 7)12-AIC:13665.06\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(0, 1, 1, 7)12-AIC:13518.66\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 0, 0, 7)12-AIC:13981.53\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 0, 1, 7)12-AIC:13934.17\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 1, 0, 7)12-AIC:13587.34\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 1, 1, 7)12-AIC:13520.65\n","ARIMA(1, 1, 0)x(0, 0, 0, 7)12-AIC:14155.25\n","ARIMA(1, 1, 0)x(0, 0, 1, 7)12-AIC:14073.61\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(0, 1, 0, 7)12-AIC:13732.4\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(0, 1, 1, 7)12-AIC:13574.05\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(1, 0, 0, 7)12-AIC:14000.86\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(1, 0, 1, 7)12-AIC:13936.35\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(1, 1, 0, 7)12-AIC:13644.66\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(1, 1, 1, 7)12-AIC:13576.04\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/statespace/sarimax.py:949: UserWarning: Non-stationary starting autoregressive parameters found. Using zeros as starting parameters.\n","  warn('Non-stationary starting autoregressive parameters'\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/statespace/sarimax.py:961: UserWarning: Non-invertible starting MA parameters found. Using zeros as starting parameters.\n","  warn('Non-invertible starting MA parameters found.'\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 0, 0, 7)12-AIC:14039.72\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 0, 1, 7)12-AIC:13973.1\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 1, 0, 7)12-AIC:13663.99\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 1, 1, 7)12-AIC:13530.42\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 0, 0, 7)12-AIC:13923.81\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 0, 1, 7)12-AIC:13878.28\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 1, 0, 7)12-AIC:13592.61\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 1, 1, 7)12-AIC:13532.21\n","The smallest AIC is 13518.655558441222 for model SARIMAX(1, 0, 1)x(0, 1, 1, 7)\n","ARIMA(0, 0, 0)x(0, 0, 0, 7)12-AIC:14227.76\n","ARIMA(0, 0, 0)x(0, 0, 1, 7)12-AIC:14039.81\n","ARIMA(0, 0, 0)x(0, 1, 0, 7)12-AIC:13175.31\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(0, 1, 1, 7)12-AIC:13003.6\n","ARIMA(0, 0, 0)x(1, 0, 0, 7)12-AIC:13440.13\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/statespace/sarimax.py:981: UserWarning: Non-stationary starting seasonal autoregressive Using zeros as starting parameters.\n","  warn('Non-stationary starting seasonal autoregressive'\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 0, 1, 7)12-AIC:13243.64\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 1, 0, 7)12-AIC:13046.61\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 1, 1, 7)12-AIC:13002.53\n","ARIMA(0, 0, 1)x(0, 0, 0, 7)12-AIC:13996.7\n","ARIMA(0, 0, 1)x(0, 0, 1, 7)12-AIC:13934.87\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(0, 1, 0, 7)12-AIC:13176.83\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(0, 1, 1, 7)12-AIC:13037.09\n","ARIMA(0, 0, 1)x(1, 0, 0, 7)12-AIC:13862.71\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(1, 0, 1, 7)12-AIC:13846.6\n","ARIMA(0, 0, 1)x(1, 1, 0, 7)12-AIC:13067.91\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(1, 1, 1, 7)12-AIC:13037.17\n","ARIMA(0, 1, 0)x(0, 0, 0, 7)12-AIC:13669.1\n","ARIMA(0, 1, 0)x(0, 0, 1, 7)12-AIC:13613.69\n","ARIMA(0, 1, 0)x(0, 1, 0, 7)12-AIC:13376.05\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(0, 1, 1, 7)12-AIC:13156.7\n","ARIMA(0, 1, 0)x(1, 0, 0, 7)12-AIC:13547.56\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(1, 0, 1, 7)12-AIC:13408.69\n","ARIMA(0, 1, 0)x(1, 1, 0, 7)12-AIC:13222.32\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(1, 1, 1, 7)12-AIC:13129.72\n","ARIMA(0, 1, 1)x(0, 0, 0, 7)12-AIC:13583.3\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(0, 0, 1, 7)12-AIC:13514.05\n","ARIMA(0, 1, 1)x(0, 1, 0, 7)12-AIC:13178.38\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(0, 1, 1, 7)12-AIC:13033.85\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 0, 0, 7)12-AIC:13453.27\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 0, 1, 7)12-AIC:13403.05\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 1, 0, 7)12-AIC:13077.28\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 1, 1, 7)12-AIC:13032.59\n","ARIMA(1, 0, 0)x(0, 0, 0, 7)12-AIC:13687.59\n","ARIMA(1, 0, 0)x(0, 0, 1, 7)12-AIC:13624.44\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(0, 1, 0, 7)12-AIC:13176.84\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(0, 1, 1, 7)12-AIC:13034.68\n","ARIMA(1, 0, 0)x(1, 0, 0, 7)12-AIC:13515.43\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 0, 1, 7)12-AIC:13446.25\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 1, 0, 7)12-AIC:13067.12\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 1, 1, 7)12-AIC:13034.78\n","ARIMA(1, 0, 1)x(0, 0, 0, 7)12-AIC:13688.33\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(0, 0, 1, 7)12-AIC:13548.39\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(0, 1, 0, 7)12-AIC:13178.82\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(0, 1, 1, 7)12-AIC:13016.03\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 0, 0, 7)12-AIC:13486.58\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 0, 1, 7)12-AIC:13432.71\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 1, 0, 7)12-AIC:13066.84\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 1, 1, 7)12-AIC:13015.96\n","ARIMA(1, 1, 0)x(0, 0, 0, 7)12-AIC:13668.58\n","ARIMA(1, 1, 0)x(0, 0, 1, 7)12-AIC:13600.93\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(0, 1, 0, 7)12-AIC:13286.33\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(0, 1, 1, 7)12-AIC:13106.29\n","ARIMA(1, 1, 0)x(1, 0, 0, 7)12-AIC:13528.3\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(1, 0, 1, 7)12-AIC:13444.93\n","ARIMA(1, 1, 0)x(1, 1, 0, 7)12-AIC:13154.39\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(1, 1, 1, 7)12-AIC:13105.18\n","ARIMA(1, 1, 1)x(0, 0, 0, 7)12-AIC:13548.8\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 0, 1, 7)12-AIC:13495.11\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 1, 0, 7)12-AIC:13176.76\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 1, 1, 7)12-AIC:13035.27\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 0, 0, 7)12-AIC:13443.6\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 0, 1, 7)12-AIC:13391.96\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 1, 0, 7)12-AIC:13077.75\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 1, 1, 7)12-AIC:13034.13\n","The smallest AIC is 13002.532642335525 for model SARIMAX(0, 0, 0)x(1, 1, 1, 7)\n","ARIMA(0, 0, 0)x(0, 0, 0, 7)12-AIC:13894.42\n","ARIMA(0, 0, 0)x(0, 0, 1, 7)12-AIC:13706.38\n","ARIMA(0, 0, 0)x(0, 1, 0, 7)12-AIC:12908.82\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(0, 1, 1, 7)12-AIC:12705.46\n","ARIMA(0, 0, 0)x(1, 0, 0, 7)12-AIC:13163.77\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 0, 1, 7)12-AIC:12931.55\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 1, 0, 7)12-AIC:12777.19\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 0)x(1, 1, 1, 7)12-AIC:12706.32\n","ARIMA(0, 0, 1)x(0, 0, 0, 7)12-AIC:13669.55\n","ARIMA(0, 0, 1)x(0, 0, 1, 7)12-AIC:13617.88\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(0, 1, 0, 7)12-AIC:12909.08\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(0, 1, 1, 7)12-AIC:12749.81\n","ARIMA(0, 0, 1)x(1, 0, 0, 7)12-AIC:13556.83\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(1, 0, 1, 7)12-AIC:13537.42\n","ARIMA(0, 0, 1)x(1, 1, 0, 7)12-AIC:12793.38"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 0, 1)x(1, 1, 1, 7)12-AIC:12749.39\n","ARIMA(0, 1, 0)x(0, 0, 0, 7)12-AIC:13230.84\n","ARIMA(0, 1, 0)x(0, 0, 1, 7)12-AIC:13214.64\n","ARIMA(0, 1, 0)x(0, 1, 0, 7)12-AIC:13099.47\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(0, 1, 1, 7)12-AIC:12855.15\n","ARIMA(0, 1, 0)x(1, 0, 0, 7)12-AIC:13198.34\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(1, 0, 1, 7)12-AIC:13089.54\n","ARIMA(0, 1, 0)x(1, 1, 0, 7)12-AIC:12916.55\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 0)x(1, 1, 1, 7)12-AIC:12814.78\n","ARIMA(0, 1, 1)x(0, 0, 0, 7)12-AIC:13133.13\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(0, 0, 1, 7)12-AIC:13098.46\n","ARIMA(0, 1, 1)x(0, 1, 0, 7)12-AIC:12917.7\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(0, 1, 1, 7)12-AIC:12763.05\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 0, 0, 7)12-AIC:13069.39\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 0, 1, 7)12-AIC:13002.46\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 1, 0, 7)12-AIC:12810.33\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(0, 1, 1)x(1, 1, 1, 7)12-AIC:12758.02\n","ARIMA(1, 0, 0)x(0, 0, 0, 7)12-AIC:13253.88\n","ARIMA(1, 0, 0)x(0, 0, 1, 7)12-AIC:13233.13\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(0, 1, 0, 7)12-AIC:12909.3\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(0, 1, 1, 7)12-AIC:12747.67\n","ARIMA(1, 0, 0)x(1, 0, 0, 7)12-AIC:13175.2\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 0, 1, 7)12-AIC:13052.35\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 1, 0, 7)12-AIC:12792.39\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 0)x(1, 1, 1, 7)12-AIC:12746.53\n","ARIMA(1, 0, 1)x(0, 0, 0, 7)12-AIC:13168.51\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(0, 0, 1, 7)12-AIC:13134.48\n","ARIMA(1, 0, 1)x(0, 1, 0, 7)12-AIC:12910.1\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(0, 1, 1, 7)12-AIC:12737.6\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 0, 0, 7)12-AIC:13106.0\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 0, 1, 7)12-AIC:13036.9\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 1, 0, 7)12-AIC:12792.67\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 0, 1)x(1, 1, 1, 7)12-AIC:12733.89\n","ARIMA(1, 1, 0)x(0, 0, 0, 7)12-AIC:13224.18\n","ARIMA(1, 1, 0)x(0, 0, 1, 7)12-AIC:13197.76\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(0, 1, 0, 7)12-AIC:13028.41\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(0, 1, 1, 7)12-AIC:12837.29\n","ARIMA(1, 1, 0)x(1, 0, 0, 7)12-AIC:13169.61\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(1, 0, 1, 7)12-AIC:13062.05\n","ARIMA(1, 1, 0)x(1, 1, 0, 7)12-AIC:12886.42\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 0)x(1, 1, 1, 7)12-AIC:12830.65\n","ARIMA(1, 1, 1)x(0, 0, 0, 7)12-AIC:13102.09\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 0, 1, 7)12-AIC:13078.74\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 1, 0, 7)12-AIC:12912.5\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(0, 1, 1, 7)12-AIC:12762.45\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 0, 0, 7)12-AIC:13056.27\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 0, 1, 7)12-AIC:12987.31\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 1, 0, 7)12-AIC:12806.72\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]},{"output_type":"stream","name":"stdout","text":["ARIMA(1, 1, 1)x(1, 1, 1, 7)12-AIC:12757.57\n","The smallest AIC is 12705.461578994571 for model SARIMAX(0, 0, 0)x(0, 1, 1, 7)\n"]}]},{"cell_type":"code","source":["final_params"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"CaGV-1GKoQkg","executionInfo":{"status":"ok","timestamp":1660298738813,"user_tz":-540,"elapsed":22,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"e840f3a2-b522-481c-bbbf-84aee30d4b50"},"execution_count":8,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[((0, 0, 0), (1, 1, 1, 7)),\n"," ((1, 0, 1), (0, 1, 1, 7)),\n"," ((0, 0, 0), (1, 1, 1, 7)),\n"," ((0, 0, 0), (0, 1, 1, 7))]"]},"metadata":{},"execution_count":8}]},{"cell_type":"markdown","source":["## model fit"],"metadata":{"id":"KqTE7z6sn0KY"}},{"cell_type":"code","source":["models = []\n","for col in range(4):\n","  model = sm.tsa.statespace.SARIMAX(data[col], exog=None,\n","                                    order = final_params[col][0],\n","                                    seasonal_order = final_params[col][1],\n","                                    enforce_invertibility=True,\n","                                    enforce_stationarity=True)\n","  models.append(model.fit(disp=False))\n"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"yk7zZrhxjlsI","executionInfo":{"status":"ok","timestamp":1660298740038,"user_tz":-540,"elapsed":1242,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"e5062ab6-3e4e-414e-ea9e-2a746a25073c"},"execution_count":9,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n","/usr/local/lib/python3.7/dist-packages/statsmodels/tsa/base/tsa_model.py:165: ValueWarning: No frequency information was provided, so inferred frequency D will be used.\n","  % freq, ValueWarning)\n"]}]},{"cell_type":"markdown","source":["## prediction"],"metadata":{"id":"LS-5i5jTpI3J"}},{"cell_type":"code","source":["from pandas import datetime\n","start_index = datetime(2022,1,1)\n","end_index = datetime(2022,2,28)\n","predicts = []\n","for col in range(4):\n","  predicts.append(models[col].predict(start = start_index, end = end_index))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"utBORLm8pG3Y","executionInfo":{"status":"ok","timestamp":1660298740694,"user_tz":-540,"elapsed":664,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"4bd4b276-6e11-432b-96c9-46454d217e0d"},"execution_count":10,"outputs":[{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/ipykernel_launcher.py:1: FutureWarning: The pandas.datetime class is deprecated and will be removed from pandas in a future version. Import from datetime module instead.\n","  \"\"\"Entry point for launching an IPython kernel.\n"]}]},{"cell_type":"code","source":["pred = pd.concat([pd.DataFrame(predicts[0]),pd.DataFrame(predicts[1]),\n","                  pd.DataFrame(predicts[2]),pd.DataFrame(predicts[3])],axis=1)\n","pred.columns=[0,1,2,3]\n","pred.head()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":206},"id":"zJDM7F7Mp8tb","executionInfo":{"status":"ok","timestamp":1660298740696,"user_tz":-540,"elapsed":16,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"5dbb27c2-ea18-4446-b823-4b1da17fbb1e"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                       0             1             2             3\n","2022-01-01  9.120950e+07  1.957490e+08  1.108674e+08  6.051366e+07\n","2022-01-02  7.314251e+07  1.784100e+08  9.650334e+07  4.833728e+07\n","2022-01-03  1.528288e+07  8.096867e+07  4.227666e+07  3.141759e+07\n","2022-01-04  2.018094e+07  8.672024e+07  4.326788e+07  2.940095e+07\n","2022-01-05  2.529750e+07  8.916145e+07  5.078524e+07  3.140258e+07"],"text/html":["\n","  <div id=\"df-3c64f0f7-17ee-4fe1-915e-92e9d9a5ebbe\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2022-01-01</th>\n","      <td>9.120950e+07</td>\n","      <td>1.957490e+08</td>\n","      <td>1.108674e+08</td>\n","      <td>6.051366e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2022-01-02</th>\n","      <td>7.314251e+07</td>\n","      <td>1.784100e+08</td>\n","      <td>9.650334e+07</td>\n","      <td>4.833728e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2022-01-03</th>\n","      <td>1.528288e+07</td>\n","      <td>8.096867e+07</td>\n","      <td>4.227666e+07</td>\n","      <td>3.141759e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2022-01-04</th>\n","      <td>2.018094e+07</td>\n","      <td>8.672024e+07</td>\n","      <td>4.326788e+07</td>\n","      <td>2.940095e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2022-01-05</th>\n","      <td>2.529750e+07</td>\n","      <td>8.916145e+07</td>\n","      <td>5.078524e+07</td>\n","      <td>3.140258e+07</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3c64f0f7-17ee-4fe1-915e-92e9d9a5ebbe')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-3c64f0f7-17ee-4fe1-915e-92e9d9a5ebbe button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-3c64f0f7-17ee-4fe1-915e-92e9d9a5ebbe');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["pred[0].plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":329},"id":"YxDy5BF6s-9u","executionInfo":{"status":"ok","timestamp":1660298758102,"user_tz":-540,"elapsed":699,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"ce917198-300b-4e5a-c632-03cd0acb1af4"},"execution_count":12,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f5a8e747fd0>"]},"metadata":{},"execution_count":12},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"markdown","source":["# Prediction"],"metadata":{"id":"AdF2dEFvsbUF"}},{"cell_type":"code","source":["df = pd.concat([data,pred],axis=0)\n","df"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"XvqKr3deseAk","executionInfo":{"status":"ok","timestamp":1660298764933,"user_tz":-540,"elapsed":457,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"ea5060ff-3590-4050-c83a-25de09cba008"},"execution_count":13,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                       0             1             2             3\n","2021-01-01  2.009924e+06  5.952505e+07  3.691846e+07  2.767018e+07\n","2021-01-02  8.037818e+07  2.015447e+08  1.236805e+08  6.542820e+07\n","2021-01-03  5.525604e+07  2.593240e+08  8.341284e+07  5.196933e+07\n","2021-01-04  1.600168e+07  1.134967e+08  3.987037e+07  4.744304e+07\n","2021-01-05  1.122177e+07  8.365863e+07  3.781430e+07  3.015372e+07\n","...                  ...           ...           ...           ...\n","2022-02-24  2.763046e+07  8.481370e+07  4.392892e+07  2.960676e+07\n","2022-02-25  7.593923e+07  1.630801e+08  8.467795e+07  4.771724e+07\n","2022-02-26  9.089592e+07  1.949183e+08  1.128166e+08  6.051366e+07\n","2022-02-27  7.341400e+07  1.775990e+08  9.753375e+07  4.833728e+07\n","2022-02-28  1.467674e+07  8.017699e+07  4.264613e+07  3.141759e+07\n","\n","[424 rows x 4 columns]"],"text/html":["\n","  <div id=\"df-35f31212-1d17-4616-ae04-cfc7e2b8c0be\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0</th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>2021-01-01</th>\n","      <td>2.009924e+06</td>\n","      <td>5.952505e+07</td>\n","      <td>3.691846e+07</td>\n","      <td>2.767018e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-02</th>\n","      <td>8.037818e+07</td>\n","      <td>2.015447e+08</td>\n","      <td>1.236805e+08</td>\n","      <td>6.542820e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-03</th>\n","      <td>5.525604e+07</td>\n","      <td>2.593240e+08</td>\n","      <td>8.341284e+07</td>\n","      <td>5.196933e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-04</th>\n","      <td>1.600168e+07</td>\n","      <td>1.134967e+08</td>\n","      <td>3.987037e+07</td>\n","      <td>4.744304e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2021-01-05</th>\n","      <td>1.122177e+07</td>\n","      <td>8.365863e+07</td>\n","      <td>3.781430e+07</td>\n","      <td>3.015372e+07</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-24</th>\n","      <td>2.763046e+07</td>\n","      <td>8.481370e+07</td>\n","      <td>4.392892e+07</td>\n","      <td>2.960676e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-25</th>\n","      <td>7.593923e+07</td>\n","      <td>1.630801e+08</td>\n","      <td>8.467795e+07</td>\n","      <td>4.771724e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-26</th>\n","      <td>9.089592e+07</td>\n","      <td>1.949183e+08</td>\n","      <td>1.128166e+08</td>\n","      <td>6.051366e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-27</th>\n","      <td>7.341400e+07</td>\n","      <td>1.775990e+08</td>\n","      <td>9.753375e+07</td>\n","      <td>4.833728e+07</td>\n","    </tr>\n","    <tr>\n","      <th>2022-02-28</th>\n","      <td>1.467674e+07</td>\n","      <td>8.017699e+07</td>\n","      <td>4.264613e+07</td>\n","      <td>3.141759e+07</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>424 rows × 4 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-35f31212-1d17-4616-ae04-cfc7e2b8c0be')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-35f31212-1d17-4616-ae04-cfc7e2b8c0be button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-35f31212-1d17-4616-ae04-cfc7e2b8c0be');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":13}]},{"cell_type":"code","source":["df[0].plot()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":306},"id":"K8qsKyWqsfrx","executionInfo":{"status":"ok","timestamp":1660298775564,"user_tz":-540,"elapsed":774,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"cdc0ec45-6d0f-4be8-fda1-fc35833e34ab"},"execution_count":15,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.axes._subplots.AxesSubplot at 0x7f5a8e0fb2d0>"]},"metadata":{},"execution_count":15},{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{"needs_background":"light"}}]},{"cell_type":"code","source":[""],"metadata":{"id":"QKiguM-Nsx8V"},"execution_count":null,"outputs":[]}]}
{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1650dF9wUNhF7wiStaUFNYqcdpoXmYEHH","timestamp":1659863114714}],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"},"gpuClass":"standard"},"cells":[{"cell_type":"code","execution_count":null,"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":607},"id":"ZLYVu2rzhxlO","executionInfo":{"status":"ok","timestamp":1660279789283,"user_tz":-540,"elapsed":59186,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"23d8a9a4-98f7-4d3a-944b-63667fb7deb5"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n","Selecting previously unselected package fonts-nanum.\n","(Reading database ... 155680 files and directories currently installed.)\n","Preparing to unpack .../fonts-nanum_20170925-1_all.deb ...\n","Unpacking fonts-nanum (20170925-1) ...\n","Selecting previously unselected package fonts-nanum-eco.\n","Preparing to unpack .../fonts-nanum-eco_1.000-6_all.deb ...\n","Unpacking fonts-nanum-eco (1.000-6) ...\n","Selecting previously unselected package fonts-nanum-extra.\n","Preparing to unpack .../fonts-nanum-extra_20170925-1_all.deb ...\n","Unpacking fonts-nanum-extra (20170925-1) ...\n","Selecting previously unselected package fonts-nanum-coding.\n","Preparing to unpack .../fonts-nanum-coding_2.5-1_all.deb ...\n","Unpacking fonts-nanum-coding (2.5-1) ...\n","Setting up fonts-nanum-extra (20170925-1) ...\n","Setting up fonts-nanum (20170925-1) ...\n","Setting up fonts-nanum-coding (2.5-1) ...\n","Setting up fonts-nanum-eco (1.000-6) ...\n","Processing triggers for fontconfig (2.12.6-0ubuntu2) ...\n","NanumBarunGothic\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/IPython/core/interactiveshell.py:2882: DtypeWarning: Columns (4) have mixed types.Specify dtype option on import or set low_memory=False.\n","  exec(code_obj, self.user_global_ns, self.user_ns)\n"]},{"output_type":"execute_result","data":{"text/plain":["         cust  chnl_dv    pd_c     de_dt  de_hr   buy_am  buy_ct cop_c  \\\n","0  M430112881        1  PD0290  20210101     10  15000.0       1   A01   \n","1  M646853852        1  PD1369  20210101     10  79700.0       1   A01   \n","2  M430112881        1  PD0290  20210101     10  19000.0       1   A01   \n","3  M430112881        1  PD0290  20210101     10  19000.0       1   A01   \n","4  M430112881        1  PD0290  20210101     10  19000.0       1   A01   \n","\n","         rct_no ma_fem_dv ages zon_hlv     pd_nm clac_hlv_nm clac_mcls_nm  \n","0  A01000001113        여성  50대     Z17     남성티셔츠        남성의류       남성의류상의  \n","1  A01000002265        여성  40대     Z13  기타주방일회용품        주방잡화       주방일회용품  \n","2  A01000003148        여성  50대     Z17     남성티셔츠        남성의류       남성의류상의  \n","3  A01000003148        여성  50대     Z17     남성티셔츠        남성의류       남성의류상의  \n","4  A01000004946        여성  50대     Z17     남성티셔츠        남성의류       남성의류상의  "],"text/html":["\n","  <div id=\"df-b4b648f4-cee4-451a-9472-ee74c930959a\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cust</th>\n","      <th>chnl_dv</th>\n","      <th>pd_c</th>\n","      <th>de_dt</th>\n","      <th>de_hr</th>\n","      <th>buy_am</th>\n","      <th>buy_ct</th>\n","      <th>cop_c</th>\n","      <th>rct_no</th>\n","      <th>ma_fem_dv</th>\n","      <th>ages</th>\n","      <th>zon_hlv</th>\n","      <th>pd_nm</th>\n","      <th>clac_hlv_nm</th>\n","      <th>clac_mcls_nm</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>M430112881</td>\n","      <td>1</td>\n","      <td>PD0290</td>\n","      <td>20210101</td>\n","      <td>10</td>\n","      <td>15000.0</td>\n","      <td>1</td>\n","      <td>A01</td>\n","      <td>A01000001113</td>\n","      <td>여성</td>\n","      <td>50대</td>\n","      <td>Z17</td>\n","      <td>남성티셔츠</td>\n","      <td>남성의류</td>\n","      <td>남성의류상의</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>M646853852</td>\n","      <td>1</td>\n","      <td>PD1369</td>\n","      <td>20210101</td>\n","      <td>10</td>\n","      <td>79700.0</td>\n","      <td>1</td>\n","      <td>A01</td>\n","      <td>A01000002265</td>\n","      <td>여성</td>\n","      <td>40대</td>\n","      <td>Z13</td>\n","      <td>기타주방일회용품</td>\n","      <td>주방잡화</td>\n","      <td>주방일회용품</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>M430112881</td>\n","      <td>1</td>\n","      <td>PD0290</td>\n","      <td>20210101</td>\n","      <td>10</td>\n","      <td>19000.0</td>\n","      <td>1</td>\n","      <td>A01</td>\n","      <td>A01000003148</td>\n","      <td>여성</td>\n","      <td>50대</td>\n","      <td>Z17</td>\n","      <td>남성티셔츠</td>\n","      <td>남성의류</td>\n","      <td>남성의류상의</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>M430112881</td>\n","      <td>1</td>\n","      <td>PD0290</td>\n","      <td>20210101</td>\n","      <td>10</td>\n","      <td>19000.0</td>\n","      <td>1</td>\n","      <td>A01</td>\n","      <td>A01000003148</td>\n","      <td>여성</td>\n","      <td>50대</td>\n","      <td>Z17</td>\n","      <td>남성티셔츠</td>\n","      <td>남성의류</td>\n","      <td>남성의류상의</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M430112881</td>\n","      <td>1</td>\n","      <td>PD0290</td>\n","      <td>20210101</td>\n","      <td>10</td>\n","      <td>19000.0</td>\n","      <td>1</td>\n","      <td>A01</td>\n","      <td>A01000004946</td>\n","      <td>여성</td>\n","      <td>50대</td>\n","      <td>Z17</td>\n","      <td>남성티셔츠</td>\n","      <td>남성의류</td>\n","      <td>남성의류상의</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-b4b648f4-cee4-451a-9472-ee74c930959a')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-b4b648f4-cee4-451a-9472-ee74c930959a button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-b4b648f4-cee4-451a-9472-ee74c930959a');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":1}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","import pandas as pd\n","import numpy as np\n","import os\n","\n","import matplotlib as mpl\n","import matplotlib.pyplot as plt\n","import matplotlib.font_manager as fm\n","\n","!apt-get update -qq\n","!apt-get install fonts-nanum* -qq\n","path = '/usr/share/fonts/truetype/nanum/NanumBarunGothic.ttf' \n","font_name = fm.FontProperties(fname=path, size=10).get_name()\n","print(font_name)\n","plt.rc('font', family=font_name)\n","fm._rebuild()\n","mpl.rcParams['axes.unicode_minus'] = False\n","\n","L_data_1 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/롯데멤버스/LPOINT_BIG_COMP_01_DEMO.csv')\n","L_data_2 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/롯데멤버스/LPOINT_BIG_COMP_02_PDDE.csv')\n","L_data_3 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/롯데멤버스/LPOINT_BIG_COMP_03_COP_U.csv')\n","L_data_4 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/롯데멤버스/LPOINT_BIG_COMP_04_PD_CLAC.csv')\n","L_data_5 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/롯데멤버스/LPOINT_BIG_COMP_05_BR.csv')\n","L_data_6 = pd.read_csv('/content/drive/MyDrive/Colab Notebooks/롯데멤버스/LPOINT_BIG_COMP_06_LPAY.csv')\n","\n","df1 = L_data_1[['cust','ma_fem_dv','ages','zon_hlv']]\n","df2 = L_data_2[['cust','chnl_dv','pd_c','de_dt','de_hr','buy_am','buy_ct','cop_c','rct_no']]\n","df3 = L_data_4\n","\n","df = pd.merge(df2,df1,on='cust',how='left')\n","df = pd.merge(df,df3,on='pd_c',how='left')\n","df.head()"]},{"cell_type":"code","source":["df1 = df.groupby(by='cust',as_index=True).sum()[['buy_am','buy_ct']]\n","df2 = df.groupby(by='cust',as_index=True).count()[['rct_no']]\n","df3 = L_data_1[['cust','ma_fem_dv','ages','zon_hlv']]\n","\n","df['chnl_dv'] = df.apply(lambda x : 0 if x['chnl_dv']==2 else 1,axis=1)\n","df_cnt = df.groupby(by='cust',as_index=True).count()[['chnl_dv']]\n","df_sum = df.groupby(by='cust',as_index=True).sum()[['chnl_dv']]\n","df_sc = pd.merge(df_cnt,df_sum,on='cust')\n","df_sc.columns = ['count','sum']\n","# 온라인/오프라인 2 오프라인 0 온라인 1\n","df_sc['onoff']=2\n","df_sc['onoff'].loc[df_sc['sum']==0]=0\n","df_sc['onoff'].loc[df_sc['sum']==df_sc['count']]=1\n","\n","df_c = pd.merge(df1,df2,on='cust')\n","df_c = pd.merge(df_c,df3,on='cust')\n","df_c = pd.merge(df_c,df_sc['onoff'],on='cust')\n","df_c = df_c.set_index('cust',drop=True)\n","\n","dic_age = {'20대':20,'30대':30,'40대':40,'50대':50,'60대':60,'70대':70}\n","dic_zone = {'Z01':1,'Z02':2,'Z03':3,'Z04':4,'Z05':5,'Z06':6,'Z07':7,'Z08':8,'Z09':9,'Z10':10,\n","            'Z11':11,'Z12':12,'Z13':13,'Z14':14,'Z15':15,'Z16':16,'Z17':17}\n","dic_mf = {'남성':1,'여성':0}\n","df_c['ma_fem_dv'] = df_c.apply(lambda x:dic_mf[x['ma_fem_dv']],axis=1)\n","df_c['ages'] = df_c.apply(lambda x:dic_age[x['ages']],axis=1)\n","df_c['zon_hlv'] = df_c.apply(lambda x:dic_zone[x['zon_hlv']],axis=1)\n","df_c"],"metadata":{"id":"lqANsEUhieyY","executionInfo":{"status":"ok","timestamp":1660279847118,"user_tz":-540,"elapsed":57845,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"colab":{"base_uri":"https://localhost:8080/","height":455},"outputId":"294809d9-459a-459a-a19b-1f5961a12a79"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                buy_am  buy_ct  rct_no  ma_fem_dv  ages  zon_hlv  onoff\n","cust                                                                   \n","M000034966    654120.0      63      51          0    40        7      1\n","M000136117  27373630.0     114     109          0    30       11      2\n","M000201112     53120.0      30      21          0    50       17      1\n","M000225114   1937700.0     182     159          0    40       17      1\n","M000261625   6052700.0      71      67          0    40       17      1\n","...                ...     ...     ...        ...   ...      ...    ...\n","M999599111   1484022.0      43      34          0    40        4      2\n","M999673157   2851370.0      28      24          1    30       10      1\n","M999770689   1187140.0     385     315          0    30       16      2\n","M999849895   1103792.0     119      72          0    20        4      1\n","M999962961  11847248.0     416     331          0    50       17      2\n","\n","[26917 rows x 7 columns]"],"text/html":["\n","  <div id=\"df-1d9934e6-fddf-464f-82f9-c6196271827c\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>buy_am</th>\n","      <th>buy_ct</th>\n","      <th>rct_no</th>\n","      <th>ma_fem_dv</th>\n","      <th>ages</th>\n","      <th>zon_hlv</th>\n","      <th>onoff</th>\n","    </tr>\n","    <tr>\n","      <th>cust</th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>M000034966</th>\n","      <td>654120.0</td>\n","      <td>63</td>\n","      <td>51</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>M000136117</th>\n","      <td>27373630.0</td>\n","      <td>114</td>\n","      <td>109</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>11</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>M000201112</th>\n","      <td>53120.0</td>\n","      <td>30</td>\n","      <td>21</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>17</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>M000225114</th>\n","      <td>1937700.0</td>\n","      <td>182</td>\n","      <td>159</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>17</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>M000261625</th>\n","      <td>6052700.0</td>\n","      <td>71</td>\n","      <td>67</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>17</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>M999599111</th>\n","      <td>1484022.0</td>\n","      <td>43</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>4</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>M999673157</th>\n","      <td>2851370.0</td>\n","      <td>28</td>\n","      <td>24</td>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>10</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>M999770689</th>\n","      <td>1187140.0</td>\n","      <td>385</td>\n","      <td>315</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>16</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>M999849895</th>\n","      <td>1103792.0</td>\n","      <td>119</td>\n","      <td>72</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>M999962961</th>\n","      <td>11847248.0</td>\n","      <td>416</td>\n","      <td>331</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>17</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>26917 rows × 7 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-1d9934e6-fddf-464f-82f9-c6196271827c')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-1d9934e6-fddf-464f-82f9-c6196271827c button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-1d9934e6-fddf-464f-82f9-c6196271827c');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":2}]},{"cell_type":"code","source":["!pip install kmodes\n","\n","from kmodes.kprototypes import KPrototypes"],"metadata":{"id":"TubEB6VO740Z","executionInfo":{"status":"ok","timestamp":1660279852083,"user_tz":-540,"elapsed":4976,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"colab":{"base_uri":"https://localhost:8080/"},"outputId":"1ea3b24f-4bbb-4f45-c870-21477114d9be"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Collecting kmodes\n","  Downloading kmodes-0.12.1-py2.py3-none-any.whl (20 kB)\n","Requirement already satisfied: joblib>=0.11 in /usr/local/lib/python3.7/dist-packages (from kmodes) (1.1.0)\n","Requirement already satisfied: numpy>=1.10.4 in /usr/local/lib/python3.7/dist-packages (from kmodes) (1.21.6)\n","Requirement already satisfied: scikit-learn>=0.22.0 in /usr/local/lib/python3.7/dist-packages (from kmodes) (1.0.2)\n","Requirement already satisfied: scipy>=0.13.3 in /usr/local/lib/python3.7/dist-packages (from kmodes) (1.7.3)\n","Requirement already satisfied: threadpoolctl>=2.0.0 in /usr/local/lib/python3.7/dist-packages (from scikit-learn>=0.22.0->kmodes) (3.1.0)\n","Installing collected packages: kmodes\n","Successfully installed kmodes-0.12.1\n"]}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","data = df_c[['buy_am','buy_ct','rct_no']]\n","scaler = StandardScaler()\n","data_scale = scaler.fit_transform(data)"],"metadata":{"id":"lvn1RS05I6Fg"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.cluster import KMeans\n","from yellowbrick.cluster import KElbowVisualizer\n","\n","model = KMeans()\n","visualizer = KElbowVisualizer(model, k=(1,10))\n","visualizer.fit(data_scale)"],"metadata":{"id":"pVQc1RKXRa1g","executionInfo":{"status":"error","timestamp":1660279929137,"user_tz":-540,"elapsed":21600,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"colab":{"base_uri":"https://localhost:8080/","height":1000},"outputId":"dc6d19fa-08a6-40e2-9f95-ae5d06e9a10d"},"execution_count":null,"outputs":[{"output_type":"error","ename":"AttributeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mAttributeError\u001b[0m                            Traceback (most recent call last)","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, obj, include, exclude)\u001b[0m\n\u001b[1;32m    968\u001b[0m                 \u001b[0md\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'include'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minclude\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    969\u001b[0m                 \u001b[0md\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m'exclude'\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mexclude\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 970\u001b[0;31m                 \u001b[0;32mreturn\u001b[0m \u001b[0mmethod\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m**\u001b[0m\u001b[0md\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    971\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;32mNone\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    972\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m_repr_mimebundle_\u001b[0;34m(self, **kwargs)\u001b[0m\n\u001b[1;32m    612\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_repr_mimebundle_\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m**\u001b[0m\u001b[0mkwargs\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    613\u001b[0m         \u001b[0;34m\"\"\"Mime bundle used by jupyter kernels to display estimator\"\"\"\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 614\u001b[0;31m         \u001b[0moutput\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m\"text/plain\"\u001b[0m\u001b[0;34m:\u001b[0m \u001b[0mrepr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    615\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mget_config\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"display\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0;34m\"diagram\"\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    616\u001b[0m             \u001b[0moutput\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;34m\"text/html\"\u001b[0m\u001b[0;34m]\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mestimator_html_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36m__repr__\u001b[0;34m(self, N_CHAR_MAX)\u001b[0m\n\u001b[1;32m    277\u001b[0m         )\n\u001b[1;32m    278\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 279\u001b[0;31m         \u001b[0mrepr_\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpp\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mpformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    280\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    281\u001b[0m         \u001b[0;31m# Use bruteforce ellipsis when there are a lot of non-blank characters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/pprint.py\u001b[0m in \u001b[0;36mpformat\u001b[0;34m(self, object)\u001b[0m\n\u001b[1;32m    142\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mpformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    143\u001b[0m         \u001b[0msio\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_StringIO\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 144\u001b[0;31m         \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_format\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0msio\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;36m0\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    145\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0msio\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mgetvalue\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    146\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/pprint.py\u001b[0m in \u001b[0;36m_format\u001b[0;34m(self, object, stream, indent, allowance, context, level)\u001b[0m\n\u001b[1;32m    159\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_readable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    160\u001b[0m             \u001b[0;32mreturn\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 161\u001b[0;31m         \u001b[0mrep\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    162\u001b[0m         \u001b[0mmax_width\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_width\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mindent\u001b[0m \u001b[0;34m-\u001b[0m \u001b[0mallowance\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    163\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mrep\u001b[0m\u001b[0;34m)\u001b[0m \u001b[0;34m>\u001b[0m \u001b[0mmax_width\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/lib/python3.7/pprint.py\u001b[0m in \u001b[0;36m_repr\u001b[0;34m(self, object, context, level)\u001b[0m\n\u001b[1;32m    391\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m_repr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    392\u001b[0m         repr, readable, recursive = self.format(object, context.copy(),\n\u001b[0;32m--> 393\u001b[0;31m                                                 self._depth, level)\n\u001b[0m\u001b[1;32m    394\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0;32mnot\u001b[0m \u001b[0mreadable\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    395\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_readable\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/_pprint.py\u001b[0m in \u001b[0;36mformat\u001b[0;34m(self, object, context, maxlevels, level)\u001b[0m\n\u001b[1;32m    188\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxlevels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    189\u001b[0m         return _safe_repr(\n\u001b[0;32m--> 190\u001b[0;31m             \u001b[0mobject\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mcontext\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmaxlevels\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mlevel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mchanged_only\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_changed_only\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    191\u001b[0m         )\n\u001b[1;32m    192\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/_pprint.py\u001b[0m in \u001b[0;36m_safe_repr\u001b[0;34m(object, context, maxlevels, level, changed_only)\u001b[0m\n\u001b[1;32m    438\u001b[0m         \u001b[0mrecursive\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0;32mFalse\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    439\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mchanged_only\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 440\u001b[0;31m             \u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0m_changed_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobject\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    441\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    442\u001b[0m             \u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mobject\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdeep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/utils/_pprint.py\u001b[0m in \u001b[0;36m_changed_params\u001b[0;34m(estimator)\u001b[0m\n\u001b[1;32m     91\u001b[0m     estimator with non-default values.\"\"\"\n\u001b[1;32m     92\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 93\u001b[0;31m     \u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdeep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mFalse\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m     94\u001b[0m     \u001b[0minit_func\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"deprecated_original\"\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mestimator\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m__init__\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     95\u001b[0m     \u001b[0minit_params\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0minspect\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0msignature\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0minit_func\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mparameters\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/yellowbrick/base.py\u001b[0m in \u001b[0;36mget_params\u001b[0;34m(self, deep)\u001b[0m\n\u001b[1;32m    340\u001b[0m         \u001b[0mthe\u001b[0m \u001b[0mestimator\u001b[0m \u001b[0mparams\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    341\u001b[0m         \"\"\"\n\u001b[0;32m--> 342\u001b[0;31m         \u001b[0mparams\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0msuper\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mModelVisualizer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdeep\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mdeep\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    343\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mparam\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mparams\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mkeys\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    344\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mparam\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstartswith\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"estimator__\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/sklearn/base.py\u001b[0m in \u001b[0;36mget_params\u001b[0;34m(self, deep)\u001b[0m\n\u001b[1;32m    208\u001b[0m         \u001b[0mout\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdict\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    209\u001b[0m         \u001b[0;32mfor\u001b[0m \u001b[0mkey\u001b[0m \u001b[0;32min\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_param_names\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 210\u001b[0;31m             \u001b[0mvalue\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    211\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mdeep\u001b[0m \u001b[0;32mand\u001b[0m \u001b[0mhasattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mvalue\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m\"get_params\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    212\u001b[0m                 \u001b[0mdeep_items\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mvalue\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_params\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mitems\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/yellowbrick/utils/wrapper.py\u001b[0m in \u001b[0;36m__getattr__\u001b[0;34m(self, attr)\u001b[0m\n\u001b[1;32m     40\u001b[0m     \u001b[0;32mdef\u001b[0m \u001b[0m__getattr__\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     41\u001b[0m         \u001b[0;31m# proxy to the wrapped object\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m---> 42\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mgetattr\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_wrapped\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mattr\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;31mAttributeError\u001b[0m: 'KMeans' object has no attribute 'k'"]},{"output_type":"error","ename":"TypeError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mTypeError\u001b[0m                                 Traceback (most recent call last)","\u001b[0;32m<ipython-input-6-18a5c3e85f18>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      4\u001b[0m \u001b[0mmodel\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKMeans\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      5\u001b[0m \u001b[0mvisualizer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mKElbowVisualizer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mmodel\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mk\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0;36m10\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 6\u001b[0;31m \u001b[0mvisualizer\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfit\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mdata_scale\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/displayhook.py\u001b[0m in \u001b[0;36m__call__\u001b[0;34m(self, result)\u001b[0m\n\u001b[1;32m    244\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mstart_displayhook\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    245\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mwrite_output_prompt\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 246\u001b[0;31m             \u001b[0mformat_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmd_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mcompute_format_data\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    247\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mupdate_user_ns\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    248\u001b[0m             \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mfill_exec_result\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/displayhook.py\u001b[0m in \u001b[0;36mcompute_format_data\u001b[0;34m(self, result)\u001b[0m\n\u001b[1;32m    148\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    149\u001b[0m         \"\"\"\n\u001b[0;32m--> 150\u001b[0;31m         \u001b[0;32mreturn\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mshell\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mdisplay_formatter\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mformat\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mresult\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    151\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    152\u001b[0m     \u001b[0;31m# This can be set to True by the write_output_prompt method in a subclass\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.7/dist-packages/IPython/core/formatters.py\u001b[0m in \u001b[0;36mformat\u001b[0;34m(self, obj, include, exclude)\u001b[0m\n\u001b[1;32m    150\u001b[0m             \u001b[0;32mreturn\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0;34m{\u001b[0m\u001b[0;34m}\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    151\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 152\u001b[0;31m         \u001b[0mformat_dict\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mmd_dict\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mmimebundle_formatter\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0minclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0minclude\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mexclude\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mexclude\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    153\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    154\u001b[0m         \u001b[0;32mif\u001b[0m \u001b[0mformat_dict\u001b[0m \u001b[0;32mor\u001b[0m \u001b[0mmd_dict\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mTypeError\u001b[0m: cannot unpack non-iterable NoneType object"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 576x396 with 2 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["from sklearn.preprocessing import StandardScaler\n","\n","sc = StandardScaler()\n","df_scaled = sc.fit_transform(df_c[['buy_am','buy_ct','rct_no']])\n","df_ = pd.concat([pd.DataFrame(df_scaled),df_c.reset_index()[['ma_fem_dv','ages','zon_hlv','onoff']]],\n","                  axis=1)\n","df_matrix = df_cc.values\n","df_matrix\n","\n","kproto = KPrototypes(n_clusters=4,init='Cao')\n","clusters = kproto.fit_predict(df_matrix,categorical=[3,4,5,6])\n","\n","clusters"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tZn92IX78puL","executionInfo":{"status":"ok","timestamp":1660280724520,"user_tz":-540,"elapsed":782030,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"8b357d54-5698-4f17-eee7-45a6ef4c13c3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["array([3, 3, 3, ..., 0, 3, 0], dtype=uint16)"]},"metadata":{},"execution_count":7}]},{"cell_type":"markdown","source":[],"metadata":{"id":"0zngukhLQ8LZ"}},{"cell_type":"code","source":["df_c = df_c.reset_index()"],"metadata":{"id":"BNhlJumNNWXe"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["from sklearn.decomposition import PCA\n","import seaborn as sns\n","\n","\n","X = df_c.iloc[:,1:8]\n","print(X)\n","pca = PCA(n_components=2)\n","pca.fit(X)\n","pca_df = pd.DataFrame(pca.transform(X))\n","\n","\n","mean_0 = pca_df[0].median()\n","mean_1 = pca_df[1].median()\n","std_0 = pca_df[0].std()\n","std_1 = pca_df[1].std()\n","\n","\n","pca_df[0] = pca_df.apply(lambda x : (x[0]-mean_0)/std_0,axis=1)\n","pca_df[1] = pca_df.apply(lambda x : (x[1]-mean_1)/std_1,axis=1)\n","\n","pca_df['cluster'] = clusters\n","pca_df\n","\n","plt.figure(figsize=(10,10))\n","axs = sns.scatterplot(0,1,hue='cluster',data=pca_df)\n","plt.xlim((-1,20))\n","plt.ylim((-10,25))\n","plt.show()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":922},"id":"nZae1FisFTPm","executionInfo":{"status":"ok","timestamp":1660280726991,"user_tz":-540,"elapsed":2474,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"e95a7bd5-0bc6-41bf-9ae2-6d64cb6426ad"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["           buy_am  buy_ct  rct_no  ma_fem_dv  ages  zon_hlv  onoff\n","0        654120.0      63      51          0    40        7      1\n","1      27373630.0     114     109          0    30       11      2\n","2         53120.0      30      21          0    50       17      1\n","3       1937700.0     182     159          0    40       17      1\n","4       6052700.0      71      67          0    40       17      1\n","...           ...     ...     ...        ...   ...      ...    ...\n","26912   1484022.0      43      34          0    40        4      2\n","26913   2851370.0      28      24          1    30       10      1\n","26914   1187140.0     385     315          0    30       16      2\n","26915   1103792.0     119      72          0    20        4      1\n","26916  11847248.0     416     331          0    50       17      2\n","\n","[26917 rows x 7 columns]\n"]},{"output_type":"stream","name":"stderr","text":["/usr/local/lib/python3.7/dist-packages/seaborn/_decorators.py:43: FutureWarning: Pass the following variables as keyword args: x, y. From version 0.12, the only valid positional argument will be `data`, and passing other arguments without an explicit keyword will result in an error or misinterpretation.\n","  FutureWarning\n"]},{"output_type":"display_data","data":{"text/plain":["<Figure size 720x720 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["df_c"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"xM5MNoB5PjXU","executionInfo":{"status":"ok","timestamp":1660280726992,"user_tz":-540,"elapsed":28,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"d73e2cf2-ec5f-4201-bfb1-a51aeb61e5de"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             cust      buy_am  buy_ct  rct_no  ma_fem_dv  ages  zon_hlv  onoff\n","0      M000034966    654120.0      63      51          0    40        7      1\n","1      M000136117  27373630.0     114     109          0    30       11      2\n","2      M000201112     53120.0      30      21          0    50       17      1\n","3      M000225114   1937700.0     182     159          0    40       17      1\n","4      M000261625   6052700.0      71      67          0    40       17      1\n","...           ...         ...     ...     ...        ...   ...      ...    ...\n","26912  M999599111   1484022.0      43      34          0    40        4      2\n","26913  M999673157   2851370.0      28      24          1    30       10      1\n","26914  M999770689   1187140.0     385     315          0    30       16      2\n","26915  M999849895   1103792.0     119      72          0    20        4      1\n","26916  M999962961  11847248.0     416     331          0    50       17      2\n","\n","[26917 rows x 8 columns]"],"text/html":["\n","  <div id=\"df-9b4d0b61-17e0-42d8-8d3b-76c5a16ad612\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cust</th>\n","      <th>buy_am</th>\n","      <th>buy_ct</th>\n","      <th>rct_no</th>\n","      <th>ma_fem_dv</th>\n","      <th>ages</th>\n","      <th>zon_hlv</th>\n","      <th>onoff</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>M000034966</td>\n","      <td>654120.0</td>\n","      <td>63</td>\n","      <td>51</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>7</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>M000136117</td>\n","      <td>27373630.0</td>\n","      <td>114</td>\n","      <td>109</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>11</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>M000201112</td>\n","      <td>53120.0</td>\n","      <td>30</td>\n","      <td>21</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>17</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>M000225114</td>\n","      <td>1937700.0</td>\n","      <td>182</td>\n","      <td>159</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>17</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M000261625</td>\n","      <td>6052700.0</td>\n","      <td>71</td>\n","      <td>67</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>17</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>26912</th>\n","      <td>M999599111</td>\n","      <td>1484022.0</td>\n","      <td>43</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>4</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>26913</th>\n","      <td>M999673157</td>\n","      <td>2851370.0</td>\n","      <td>28</td>\n","      <td>24</td>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>10</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>26914</th>\n","      <td>M999770689</td>\n","      <td>1187140.0</td>\n","      <td>385</td>\n","      <td>315</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>16</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>26915</th>\n","      <td>M999849895</td>\n","      <td>1103792.0</td>\n","      <td>119</td>\n","      <td>72</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>4</td>\n","      <td>1</td>\n","    </tr>\n","    <tr>\n","      <th>26916</th>\n","      <td>M999962961</td>\n","      <td>11847248.0</td>\n","      <td>416</td>\n","      <td>331</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>17</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>26917 rows × 8 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-9b4d0b61-17e0-42d8-8d3b-76c5a16ad612')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-9b4d0b61-17e0-42d8-8d3b-76c5a16ad612 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-9b4d0b61-17e0-42d8-8d3b-76c5a16ad612');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["# 스케일링\n","'''\n","from sklearn.cluster import KMeans\n","from sklearn.preprocessing import StandardScaler\n","\n","sc = StandardScaler()\n","df_scaled = sc.fit_transform(df_c)\n","pd.DataFrame(df_scaled)\n","\n","kmeans = KMeans(n_clusters=5)\n","clusters = kmeans.fit(df_scaled)\n","\n","df_c['cluster'] = clusters.labels_\n","df_c.head()\n","\n","# 시각화\n","\n","from sklearn.decomposition import PCA\n","import seaborn as sns\n","\n","\n","#X=df_scaled.copy()\n","X = df_c.iloc[:,:6]\n","df_r = df_c.reset_index()\n","pca = PCA(n_components=2)\n","pca.fit(X)\n","pca_df = pd.DataFrame(pca.transform(X))\n","\n","pca_df = pd.concat([pca_df,df_r['cluster']],axis=1)\n","print(pca_df)\n","plt.figure(figsize=(20,10))\n","axs = sns.scatterplot(0,1,hue='cluster',data=pca_df)\n","plt.show()\n","'''"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":90},"id":"IcqAta1duZHU","executionInfo":{"status":"ok","timestamp":1660280726993,"user_tz":-540,"elapsed":25,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"270412a1-874a-45af-e286-e68f0b0893d2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["\"\\nfrom sklearn.cluster import KMeans\\nfrom sklearn.preprocessing import StandardScaler\\n\\nsc = StandardScaler()\\ndf_scaled = sc.fit_transform(df_c)\\npd.DataFrame(df_scaled)\\n\\nkmeans = KMeans(n_clusters=5)\\nclusters = kmeans.fit(df_scaled)\\n\\ndf_c['cluster'] = clusters.labels_\\ndf_c.head()\\n\\n# 시각화\\n\\nfrom sklearn.decomposition import PCA\\nimport seaborn as sns\\n\\n\\n#X=df_scaled.copy()\\nX = df_c.iloc[:,:6]\\ndf_r = df_c.reset_index()\\npca = PCA(n_components=2)\\npca.fit(X)\\npca_df = pd.DataFrame(pca.transform(X))\\n\\npca_df = pd.concat([pca_df,df_r['cluster']],axis=1)\\nprint(pca_df)\\nplt.figure(figsize=(20,10))\\naxs = sns.scatterplot(0,1,hue='cluster',data=pca_df)\\nplt.show()\\n\""],"application/vnd.google.colaboratory.intrinsic+json":{"type":"string"}},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["df_c['cluster'] = clusters\n","df_c"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"jlF_hYoelJLR","executionInfo":{"status":"ok","timestamp":1660280726995,"user_tz":-540,"elapsed":24,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"60514956-27ad-4eb9-8e80-28a069ecd923"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             cust      buy_am  buy_ct  rct_no  ma_fem_dv  ages  zon_hlv  \\\n","0      M000034966    654120.0      63      51          0    40        7   \n","1      M000136117  27373630.0     114     109          0    30       11   \n","2      M000201112     53120.0      30      21          0    50       17   \n","3      M000225114   1937700.0     182     159          0    40       17   \n","4      M000261625   6052700.0      71      67          0    40       17   \n","...           ...         ...     ...     ...        ...   ...      ...   \n","26912  M999599111   1484022.0      43      34          0    40        4   \n","26913  M999673157   2851370.0      28      24          1    30       10   \n","26914  M999770689   1187140.0     385     315          0    30       16   \n","26915  M999849895   1103792.0     119      72          0    20        4   \n","26916  M999962961  11847248.0     416     331          0    50       17   \n","\n","       onoff  cluster  \n","0          1        3  \n","1          2        3  \n","2          1        3  \n","3          1        3  \n","4          1        3  \n","...      ...      ...  \n","26912      2        3  \n","26913      1        3  \n","26914      2        0  \n","26915      1        3  \n","26916      2        0  \n","\n","[26917 rows x 9 columns]"],"text/html":["\n","  <div id=\"df-bdeb0e6f-3c95-4b19-a260-2bd2fdfb1677\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cust</th>\n","      <th>buy_am</th>\n","      <th>buy_ct</th>\n","      <th>rct_no</th>\n","      <th>ma_fem_dv</th>\n","      <th>ages</th>\n","      <th>zon_hlv</th>\n","      <th>onoff</th>\n","      <th>cluster</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>M000034966</td>\n","      <td>654120.0</td>\n","      <td>63</td>\n","      <td>51</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>7</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>M000136117</td>\n","      <td>27373630.0</td>\n","      <td>114</td>\n","      <td>109</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>11</td>\n","      <td>2</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>M000201112</td>\n","      <td>53120.0</td>\n","      <td>30</td>\n","      <td>21</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>17</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>M000225114</td>\n","      <td>1937700.0</td>\n","      <td>182</td>\n","      <td>159</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>17</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M000261625</td>\n","      <td>6052700.0</td>\n","      <td>71</td>\n","      <td>67</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>17</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>26912</th>\n","      <td>M999599111</td>\n","      <td>1484022.0</td>\n","      <td>43</td>\n","      <td>34</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>4</td>\n","      <td>2</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>26913</th>\n","      <td>M999673157</td>\n","      <td>2851370.0</td>\n","      <td>28</td>\n","      <td>24</td>\n","      <td>1</td>\n","      <td>30</td>\n","      <td>10</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>26914</th>\n","      <td>M999770689</td>\n","      <td>1187140.0</td>\n","      <td>385</td>\n","      <td>315</td>\n","      <td>0</td>\n","      <td>30</td>\n","      <td>16</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>26915</th>\n","      <td>M999849895</td>\n","      <td>1103792.0</td>\n","      <td>119</td>\n","      <td>72</td>\n","      <td>0</td>\n","      <td>20</td>\n","      <td>4</td>\n","      <td>1</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>26916</th>\n","      <td>M999962961</td>\n","      <td>11847248.0</td>\n","      <td>416</td>\n","      <td>331</td>\n","      <td>0</td>\n","      <td>50</td>\n","      <td>17</td>\n","      <td>2</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>26917 rows × 9 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-bdeb0e6f-3c95-4b19-a260-2bd2fdfb1677')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-bdeb0e6f-3c95-4b19-a260-2bd2fdfb1677 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-bdeb0e6f-3c95-4b19-a260-2bd2fdfb1677');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":12}]},{"cell_type":"code","source":["# 월별로 쪼개기\n","df_m= []\n","df_m.append(df.loc[(df['de_dt']<=20210131)])\n","for i in range(2,13):\n","  df_m.append(df.loc[(df['de_dt']<=int('2021'+str(i).zfill(2)+'31')) & (df['de_dt']>=int(\"2021\"+str(i).zfill(2)+'01'))])"],"metadata":{"id":"oUWp4yAD0JN3"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_m[11]"],"metadata":{"id":"SSDAhZPR1jbt","colab":{"base_uri":"https://localhost:8080/","height":424},"executionInfo":{"status":"ok","timestamp":1660280727979,"user_tz":-540,"elapsed":13,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"4d9687dd-e966-48a8-d7a7-5cea653a88f7"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["               cust  chnl_dv    pd_c     de_dt  de_hr    buy_am  buy_ct cop_c  \\\n","639391   M633699032        1  PD0288  20211201      9   10500.0       1   A01   \n","639392   M854194558        1  PD1644  20211201      9    3000.0       2   A01   \n","639393   M854194558        1  PD1181  20211201      9    1000.0       2   A01   \n","639394   M922355728        1  PD0108  20211201     10   40000.0       1   A01   \n","639395   M633699032        1  PD1081  20211201     10  150000.0       1   A01   \n","...             ...      ...     ...       ...    ...       ...     ...   ...   \n","4381738  M533286446        0  PD0507  20211231     23   50000.0       1   A06   \n","4381739  M533286446        0  PD0507  20211231     23   50000.0       1   A06   \n","4381740  M533286446        0  PD0507  20211231     23   50000.0       1   A06   \n","4381741  M533286446        0  PD0507  20211231     23   50000.0       1   A06   \n","4381742  M533286446        0  PD0507  20211231     23   50000.0       1   A06   \n","\n","               rct_no ma_fem_dv ages zon_hlv         pd_nm clac_hlv_nm  \\\n","639391   A01458190341        여성  30대     Z10          임대매출     기타(비상품)   \n","639392   A01458191877        여성  50대     Z15     티백/드립원두커피        커피/차   \n","639393   A01458191877        여성  50대     Z15          커피음료          음료   \n","639394   A01458192977        여성  40대     Z17           굴비류        건해산물   \n","639395   A01458193277        여성  30대     Z10       남아티셔츠/탑       유아동의류   \n","...               ...       ...  ...     ...           ...         ...   \n","4381738  E06052119978        남성  40대     Z10  백화점/마트모바일상품권         상품권   \n","4381739  E06052119978        남성  40대     Z10  백화점/마트모바일상품권         상품권   \n","4381740  E06052119978        남성  40대     Z10  백화점/마트모바일상품권         상품권   \n","4381741  E06052119978        남성  40대     Z10  백화점/마트모바일상품권         상품권   \n","4381742  E06052119978        남성  40대     Z10  백화점/마트모바일상품권         상품권   \n","\n","        clac_mcls_nm  \n","639391          임대매출  \n","639392          원두커피  \n","639393          커피음료  \n","639394          반건생선  \n","639395        남아의류상의  \n","...              ...  \n","4381738       모바일상품권  \n","4381739       모바일상품권  \n","4381740       모바일상품권  \n","4381741       모바일상품권  \n","4381742       모바일상품권  \n","\n","[328738 rows x 15 columns]"],"text/html":["\n","  <div id=\"df-2f10366b-f155-41ce-9b22-5062affd8af1\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cust</th>\n","      <th>chnl_dv</th>\n","      <th>pd_c</th>\n","      <th>de_dt</th>\n","      <th>de_hr</th>\n","      <th>buy_am</th>\n","      <th>buy_ct</th>\n","      <th>cop_c</th>\n","      <th>rct_no</th>\n","      <th>ma_fem_dv</th>\n","      <th>ages</th>\n","      <th>zon_hlv</th>\n","      <th>pd_nm</th>\n","      <th>clac_hlv_nm</th>\n","      <th>clac_mcls_nm</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>639391</th>\n","      <td>M633699032</td>\n","      <td>1</td>\n","      <td>PD0288</td>\n","      <td>20211201</td>\n","      <td>9</td>\n","      <td>10500.0</td>\n","      <td>1</td>\n","      <td>A01</td>\n","      <td>A01458190341</td>\n","      <td>여성</td>\n","      <td>30대</td>\n","      <td>Z10</td>\n","      <td>임대매출</td>\n","      <td>기타(비상품)</td>\n","      <td>임대매출</td>\n","    </tr>\n","    <tr>\n","      <th>639392</th>\n","      <td>M854194558</td>\n","      <td>1</td>\n","      <td>PD1644</td>\n","      <td>20211201</td>\n","      <td>9</td>\n","      <td>3000.0</td>\n","      <td>2</td>\n","      <td>A01</td>\n","      <td>A01458191877</td>\n","      <td>여성</td>\n","      <td>50대</td>\n","      <td>Z15</td>\n","      <td>티백/드립원두커피</td>\n","      <td>커피/차</td>\n","      <td>원두커피</td>\n","    </tr>\n","    <tr>\n","      <th>639393</th>\n","      <td>M854194558</td>\n","      <td>1</td>\n","      <td>PD1181</td>\n","      <td>20211201</td>\n","      <td>9</td>\n","      <td>1000.0</td>\n","      <td>2</td>\n","      <td>A01</td>\n","      <td>A01458191877</td>\n","      <td>여성</td>\n","      <td>50대</td>\n","      <td>Z15</td>\n","      <td>커피음료</td>\n","      <td>음료</td>\n","      <td>커피음료</td>\n","    </tr>\n","    <tr>\n","      <th>639394</th>\n","      <td>M922355728</td>\n","      <td>1</td>\n","      <td>PD0108</td>\n","      <td>20211201</td>\n","      <td>10</td>\n","      <td>40000.0</td>\n","      <td>1</td>\n","      <td>A01</td>\n","      <td>A01458192977</td>\n","      <td>여성</td>\n","      <td>40대</td>\n","      <td>Z17</td>\n","      <td>굴비류</td>\n","      <td>건해산물</td>\n","      <td>반건생선</td>\n","    </tr>\n","    <tr>\n","      <th>639395</th>\n","      <td>M633699032</td>\n","      <td>1</td>\n","      <td>PD1081</td>\n","      <td>20211201</td>\n","      <td>10</td>\n","      <td>150000.0</td>\n","      <td>1</td>\n","      <td>A01</td>\n","      <td>A01458193277</td>\n","      <td>여성</td>\n","      <td>30대</td>\n","      <td>Z10</td>\n","      <td>남아티셔츠/탑</td>\n","      <td>유아동의류</td>\n","      <td>남아의류상의</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>4381738</th>\n","      <td>M533286446</td>\n","      <td>0</td>\n","      <td>PD0507</td>\n","      <td>20211231</td>\n","      <td>23</td>\n","      <td>50000.0</td>\n","      <td>1</td>\n","      <td>A06</td>\n","      <td>E06052119978</td>\n","      <td>남성</td>\n","      <td>40대</td>\n","      <td>Z10</td>\n","      <td>백화점/마트모바일상품권</td>\n","      <td>상품권</td>\n","      <td>모바일상품권</td>\n","    </tr>\n","    <tr>\n","      <th>4381739</th>\n","      <td>M533286446</td>\n","      <td>0</td>\n","      <td>PD0507</td>\n","      <td>20211231</td>\n","      <td>23</td>\n","      <td>50000.0</td>\n","      <td>1</td>\n","      <td>A06</td>\n","      <td>E06052119978</td>\n","      <td>남성</td>\n","      <td>40대</td>\n","      <td>Z10</td>\n","      <td>백화점/마트모바일상품권</td>\n","      <td>상품권</td>\n","      <td>모바일상품권</td>\n","    </tr>\n","    <tr>\n","      <th>4381740</th>\n","      <td>M533286446</td>\n","      <td>0</td>\n","      <td>PD0507</td>\n","      <td>20211231</td>\n","      <td>23</td>\n","      <td>50000.0</td>\n","      <td>1</td>\n","      <td>A06</td>\n","      <td>E06052119978</td>\n","      <td>남성</td>\n","      <td>40대</td>\n","      <td>Z10</td>\n","      <td>백화점/마트모바일상품권</td>\n","      <td>상품권</td>\n","      <td>모바일상품권</td>\n","    </tr>\n","    <tr>\n","      <th>4381741</th>\n","      <td>M533286446</td>\n","      <td>0</td>\n","      <td>PD0507</td>\n","      <td>20211231</td>\n","      <td>23</td>\n","      <td>50000.0</td>\n","      <td>1</td>\n","      <td>A06</td>\n","      <td>E06052119978</td>\n","      <td>남성</td>\n","      <td>40대</td>\n","      <td>Z10</td>\n","      <td>백화점/마트모바일상품권</td>\n","      <td>상품권</td>\n","      <td>모바일상품권</td>\n","    </tr>\n","    <tr>\n","      <th>4381742</th>\n","      <td>M533286446</td>\n","      <td>0</td>\n","      <td>PD0507</td>\n","      <td>20211231</td>\n","      <td>23</td>\n","      <td>50000.0</td>\n","      <td>1</td>\n","      <td>A06</td>\n","      <td>E06052119978</td>\n","      <td>남성</td>\n","      <td>40대</td>\n","      <td>Z10</td>\n","      <td>백화점/마트모바일상품권</td>\n","      <td>상품권</td>\n","      <td>모바일상품권</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>328738 rows × 15 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-2f10366b-f155-41ce-9b22-5062affd8af1')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-2f10366b-f155-41ce-9b22-5062affd8af1 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-2f10366b-f155-41ce-9b22-5062affd8af1');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["#고객 월별 구매금액 총합\n","df_sum=[]\n","for i in range(0,12):\n","  df_sum.append(df_m[i].groupby(by='cust',as_index=True).sum()[['buy_am']])\n","df_sum[1]"],"metadata":{"id":"aeMbUFIo0v0L","colab":{"base_uri":"https://localhost:8080/","height":455},"executionInfo":{"status":"ok","timestamp":1660280729725,"user_tz":-540,"elapsed":1755,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"aed285b4-b151-4937-83a1-60aabbfc89fa"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                buy_am\n","cust                  \n","M000136117   2369100.0\n","M000261625    199700.0\n","M000350564    645800.0\n","M000419293    180700.0\n","M000494848  12202102.0\n","...                ...\n","M999599111   1158000.0\n","M999673157    119300.0\n","M999770689    259020.0\n","M999849895     80950.0\n","M999962961    155390.0\n","\n","[17950 rows x 1 columns]"],"text/html":["\n","  <div id=\"df-8e889954-8dd2-417f-8e21-b710db5c3d49\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>buy_am</th>\n","    </tr>\n","    <tr>\n","      <th>cust</th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>M000136117</th>\n","      <td>2369100.0</td>\n","    </tr>\n","    <tr>\n","      <th>M000261625</th>\n","      <td>199700.0</td>\n","    </tr>\n","    <tr>\n","      <th>M000350564</th>\n","      <td>645800.0</td>\n","    </tr>\n","    <tr>\n","      <th>M000419293</th>\n","      <td>180700.0</td>\n","    </tr>\n","    <tr>\n","      <th>M000494848</th>\n","      <td>12202102.0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>M999599111</th>\n","      <td>1158000.0</td>\n","    </tr>\n","    <tr>\n","      <th>M999673157</th>\n","      <td>119300.0</td>\n","    </tr>\n","    <tr>\n","      <th>M999770689</th>\n","      <td>259020.0</td>\n","    </tr>\n","    <tr>\n","      <th>M999849895</th>\n","      <td>80950.0</td>\n","    </tr>\n","    <tr>\n","      <th>M999962961</th>\n","      <td>155390.0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>17950 rows × 1 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8e889954-8dd2-417f-8e21-b710db5c3d49')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-8e889954-8dd2-417f-8e21-b710db5c3d49 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-8e889954-8dd2-417f-8e21-b710db5c3d49');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":15}]},{"cell_type":"code","source":["df_cc = df_c[['cust','cluster']]"],"metadata":{"id":"Y3u02RB5_Yjy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_c_sum = []\n","for i in range(0,12):\n","  df_c_sum.append(pd.merge(df_sum[i],df_cc,on='cust'))"],"metadata":{"id":"XU7s5NeVxr53"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_c_sum[0]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"KuC4dM6JTRnH","executionInfo":{"status":"ok","timestamp":1660280730286,"user_tz":-540,"elapsed":41,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"b60b037b-29ce-429a-b4e7-0dc088d81b91"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             cust      buy_am  cluster\n","0      M000034966    152200.0        3\n","1      M000136117  10660370.0        3\n","2      M000261625    242000.0        3\n","3      M000419293    565800.0        3\n","4      M000494848   1264510.0        0\n","...           ...         ...      ...\n","17513  M999468256     32500.0        3\n","17514  M999515910   1298020.0        0\n","17515  M999599111     22900.0        3\n","17516  M999770689     31270.0        0\n","17517  M999962961   2939190.0        0\n","\n","[17518 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-86e2049a-3488-413f-a615-c278fece5834\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cust</th>\n","      <th>buy_am</th>\n","      <th>cluster</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>M000034966</td>\n","      <td>152200.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>M000136117</td>\n","      <td>10660370.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>M000261625</td>\n","      <td>242000.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>M000419293</td>\n","      <td>565800.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M000494848</td>\n","      <td>1264510.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>17513</th>\n","      <td>M999468256</td>\n","      <td>32500.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>17514</th>\n","      <td>M999515910</td>\n","      <td>1298020.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>17515</th>\n","      <td>M999599111</td>\n","      <td>22900.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>17516</th>\n","      <td>M999770689</td>\n","      <td>31270.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>17517</th>\n","      <td>M999962961</td>\n","      <td>2939190.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>17518 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-86e2049a-3488-413f-a615-c278fece5834')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-86e2049a-3488-413f-a615-c278fece5834 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-86e2049a-3488-413f-a615-c278fece5834');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":18}]},{"cell_type":"code","source":["for i in range(0,12):\n","  df_c_sum[i].columns = ['cust',str(i)+'buy_am','cluster']"],"metadata":{"id":"9iaGHQlH3lc7"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_c_sum[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"WmimjTlI4GqR","executionInfo":{"status":"ok","timestamp":1660280730287,"user_tz":-540,"elapsed":38,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"c0b19d3e-1c91-422b-e12a-efe1ac7a8dc2"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             cust     1buy_am  cluster\n","0      M000136117   2369100.0        3\n","1      M000261625    199700.0        3\n","2      M000350564    645800.0        3\n","3      M000419293    180700.0        3\n","4      M000494848  12202102.0        0\n","...           ...         ...      ...\n","17945  M999599111   1158000.0        3\n","17946  M999673157    119300.0        3\n","17947  M999770689    259020.0        0\n","17948  M999849895     80950.0        3\n","17949  M999962961    155390.0        0\n","\n","[17950 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-f90740b8-4d71-4ff5-b747-8d180a0fe9d2\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cust</th>\n","      <th>1buy_am</th>\n","      <th>cluster</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>M000136117</td>\n","      <td>2369100.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>M000261625</td>\n","      <td>199700.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>M000350564</td>\n","      <td>645800.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>M000419293</td>\n","      <td>180700.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>M000494848</td>\n","      <td>12202102.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>17945</th>\n","      <td>M999599111</td>\n","      <td>1158000.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>17946</th>\n","      <td>M999673157</td>\n","      <td>119300.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>17947</th>\n","      <td>M999770689</td>\n","      <td>259020.0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>17948</th>\n","      <td>M999849895</td>\n","      <td>80950.0</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>17949</th>\n","      <td>M999962961</td>\n","      <td>155390.0</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>17950 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f90740b8-4d71-4ff5-b747-8d180a0fe9d2')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-f90740b8-4d71-4ff5-b747-8d180a0fe9d2 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-f90740b8-4d71-4ff5-b747-8d180a0fe9d2');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":20}]},{"cell_type":"code","source":["df_sum=[[],[],[],[],[],[],[],[],[],[],[],[]]\n","for i in range(0,12):\n","  for j in range(0,4):\n","   df_sum[i].append(df_c_sum[i].loc[(df_c_sum[i]['cluster']==j)])"],"metadata":{"id":"vuJgSU0_4Z2n"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["df_sum[2][2]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":424},"id":"aMotqeUYEii1","executionInfo":{"status":"ok","timestamp":1660280730289,"user_tz":-540,"elapsed":36,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"803a176c-2b7a-4777-aac8-1505a6429be3"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["             cust    2buy_am  cluster\n","50     M003803545   901334.0        2\n","69     M004725109   452830.0        2\n","79     M005190060   142240.0        2\n","105    M006407679  1687828.0        2\n","120    M006997862   704962.0        2\n","...           ...        ...      ...\n","18439  M994476623   491370.0        2\n","18454  M995360116   317280.0        2\n","18471  M996096528   869434.0        2\n","18482  M996539287   941682.0        2\n","18493  M997080768   522612.0        2\n","\n","[1217 rows x 3 columns]"],"text/html":["\n","  <div id=\"df-5720935e-cc66-40b3-b415-00238d8bafb6\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>cust</th>\n","      <th>2buy_am</th>\n","      <th>cluster</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>50</th>\n","      <td>M003803545</td>\n","      <td>901334.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>69</th>\n","      <td>M004725109</td>\n","      <td>452830.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>79</th>\n","      <td>M005190060</td>\n","      <td>142240.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>105</th>\n","      <td>M006407679</td>\n","      <td>1687828.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>120</th>\n","      <td>M006997862</td>\n","      <td>704962.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>...</th>\n","      <td>...</td>\n","      <td>...</td>\n","      <td>...</td>\n","    </tr>\n","    <tr>\n","      <th>18439</th>\n","      <td>M994476623</td>\n","      <td>491370.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>18454</th>\n","      <td>M995360116</td>\n","      <td>317280.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>18471</th>\n","      <td>M996096528</td>\n","      <td>869434.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>18482</th>\n","      <td>M996539287</td>\n","      <td>941682.0</td>\n","      <td>2</td>\n","    </tr>\n","    <tr>\n","      <th>18493</th>\n","      <td>M997080768</td>\n","      <td>522612.0</td>\n","      <td>2</td>\n","    </tr>\n","  </tbody>\n","</table>\n","<p>1217 rows × 3 columns</p>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-5720935e-cc66-40b3-b415-00238d8bafb6')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-5720935e-cc66-40b3-b415-00238d8bafb6 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-5720935e-cc66-40b3-b415-00238d8bafb6');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":22}]},{"cell_type":"code","source":["dfc=[]\n","for j in range(0,4):\n","  b = {}\n","  for i in range(0,12):\n","    b[str(i)+'buy_am'] = [df_sum[i][j][str(i)+'buy_am'].sum()]\n","  dfc.append(pd.DataFrame(b))"],"metadata":{"id":"IOiC8l0m7rPT"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["dfc[1]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":81},"id":"04GMYl4pGpq0","executionInfo":{"status":"ok","timestamp":1660280730290,"user_tz":-540,"elapsed":34,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"18180486-238e-463b-a4df-06c4b60a525a"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["       0buy_am      1buy_am      2buy_am       3buy_am       4buy_am  \\\n","0  920287922.0  930161445.0  965986566.0  1.008330e+09  1.151054e+09   \n","\n","        5buy_am       6buy_am       7buy_am       8buy_am       9buy_am  \\\n","0  1.033511e+09  1.161505e+09  1.280934e+09  1.198987e+09  1.048407e+09   \n","\n","       10buy_am      11buy_am  \n","0  1.147088e+09  1.233334e+09  "],"text/html":["\n","  <div id=\"df-38b97773-711e-4f85-b089-3bce43767225\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>0buy_am</th>\n","      <th>1buy_am</th>\n","      <th>2buy_am</th>\n","      <th>3buy_am</th>\n","      <th>4buy_am</th>\n","      <th>5buy_am</th>\n","      <th>6buy_am</th>\n","      <th>7buy_am</th>\n","      <th>8buy_am</th>\n","      <th>9buy_am</th>\n","      <th>10buy_am</th>\n","      <th>11buy_am</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>920287922.0</td>\n","      <td>930161445.0</td>\n","      <td>965986566.0</td>\n","      <td>1.008330e+09</td>\n","      <td>1.151054e+09</td>\n","      <td>1.033511e+09</td>\n","      <td>1.161505e+09</td>\n","      <td>1.280934e+09</td>\n","      <td>1.198987e+09</td>\n","      <td>1.048407e+09</td>\n","      <td>1.147088e+09</td>\n","      <td>1.233334e+09</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-38b97773-711e-4f85-b089-3bce43767225')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-38b97773-711e-4f85-b089-3bce43767225 button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-38b97773-711e-4f85-b089-3bce43767225');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":24}]},{"cell_type":"code","source":["list =[dfc[0],dfc[1],dfc[2],dfc[3]]\n","data_c = pd.concat(list)\n","data_c.index=['c0','c1','c2','c3']\n","data_c = data_c.transpose()\n","data_c"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":426},"id":"pzUfOQ68jGu0","executionInfo":{"status":"ok","timestamp":1660280730290,"user_tz":-540,"elapsed":31,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"4443ec25-bb29-4857-8123-7e2d0943eb90"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["                    c0            c1           c2            c3\n","0buy_am   3.735470e+09  9.202879e+08  905639416.0  2.899195e+09\n","1buy_am   3.656746e+09  9.301614e+08  823165626.0  2.871456e+09\n","2buy_am   3.746750e+09  9.659866e+08  925229050.0  3.171120e+09\n","3buy_am   3.857264e+09  1.008330e+09  895647117.0  3.169589e+09\n","4buy_am   4.259667e+09  1.151054e+09  983902929.0  3.494769e+09\n","5buy_am   3.149015e+09  1.033511e+09  733811825.0  2.630133e+09\n","6buy_am   3.034377e+09  1.161505e+09  768050338.0  2.486209e+09\n","7buy_am   3.096459e+09  1.280934e+09  777408062.0  2.622439e+09\n","8buy_am   3.620422e+09  1.198987e+09  767928430.0  2.991078e+09\n","9buy_am   3.684542e+09  1.048407e+09  789591796.0  3.469552e+09\n","10buy_am  3.540886e+09  1.147088e+09  754231005.0  2.960390e+09\n","11buy_am  3.528799e+09  1.233334e+09  747351493.0  3.083505e+09"],"text/html":["\n","  <div id=\"df-fb3229be-c59c-4533-996d-39748512891b\">\n","    <div class=\"colab-df-container\">\n","      <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>c0</th>\n","      <th>c1</th>\n","      <th>c2</th>\n","      <th>c3</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0buy_am</th>\n","      <td>3.735470e+09</td>\n","      <td>9.202879e+08</td>\n","      <td>905639416.0</td>\n","      <td>2.899195e+09</td>\n","    </tr>\n","    <tr>\n","      <th>1buy_am</th>\n","      <td>3.656746e+09</td>\n","      <td>9.301614e+08</td>\n","      <td>823165626.0</td>\n","      <td>2.871456e+09</td>\n","    </tr>\n","    <tr>\n","      <th>2buy_am</th>\n","      <td>3.746750e+09</td>\n","      <td>9.659866e+08</td>\n","      <td>925229050.0</td>\n","      <td>3.171120e+09</td>\n","    </tr>\n","    <tr>\n","      <th>3buy_am</th>\n","      <td>3.857264e+09</td>\n","      <td>1.008330e+09</td>\n","      <td>895647117.0</td>\n","      <td>3.169589e+09</td>\n","    </tr>\n","    <tr>\n","      <th>4buy_am</th>\n","      <td>4.259667e+09</td>\n","      <td>1.151054e+09</td>\n","      <td>983902929.0</td>\n","      <td>3.494769e+09</td>\n","    </tr>\n","    <tr>\n","      <th>5buy_am</th>\n","      <td>3.149015e+09</td>\n","      <td>1.033511e+09</td>\n","      <td>733811825.0</td>\n","      <td>2.630133e+09</td>\n","    </tr>\n","    <tr>\n","      <th>6buy_am</th>\n","      <td>3.034377e+09</td>\n","      <td>1.161505e+09</td>\n","      <td>768050338.0</td>\n","      <td>2.486209e+09</td>\n","    </tr>\n","    <tr>\n","      <th>7buy_am</th>\n","      <td>3.096459e+09</td>\n","      <td>1.280934e+09</td>\n","      <td>777408062.0</td>\n","      <td>2.622439e+09</td>\n","    </tr>\n","    <tr>\n","      <th>8buy_am</th>\n","      <td>3.620422e+09</td>\n","      <td>1.198987e+09</td>\n","      <td>767928430.0</td>\n","      <td>2.991078e+09</td>\n","    </tr>\n","    <tr>\n","      <th>9buy_am</th>\n","      <td>3.684542e+09</td>\n","      <td>1.048407e+09</td>\n","      <td>789591796.0</td>\n","      <td>3.469552e+09</td>\n","    </tr>\n","    <tr>\n","      <th>10buy_am</th>\n","      <td>3.540886e+09</td>\n","      <td>1.147088e+09</td>\n","      <td>754231005.0</td>\n","      <td>2.960390e+09</td>\n","    </tr>\n","    <tr>\n","      <th>11buy_am</th>\n","      <td>3.528799e+09</td>\n","      <td>1.233334e+09</td>\n","      <td>747351493.0</td>\n","      <td>3.083505e+09</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-fb3229be-c59c-4533-996d-39748512891b')\"\n","              title=\"Convert this dataframe to an interactive table.\"\n","              style=\"display:none;\">\n","        \n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n","    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n","  </svg>\n","      </button>\n","      \n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      flex-wrap:wrap;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","      <script>\n","        const buttonEl =\n","          document.querySelector('#df-fb3229be-c59c-4533-996d-39748512891b button.colab-df-convert');\n","        buttonEl.style.display =\n","          google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","        async function convertToInteractive(key) {\n","          const element = document.querySelector('#df-fb3229be-c59c-4533-996d-39748512891b');\n","          const dataTable =\n","            await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                     [key], {});\n","          if (!dataTable) return;\n","\n","          const docLinkHtml = 'Like what you see? Visit the ' +\n","            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","            + ' to learn more about interactive tables.';\n","          element.innerHTML = '';\n","          dataTable['output_type'] = 'display_data';\n","          await google.colab.output.renderOutput(dataTable, element);\n","          const docLink = document.createElement('div');\n","          docLink.innerHTML = docLinkHtml;\n","          element.appendChild(docLink);\n","        }\n","      </script>\n","    </div>\n","  </div>\n","  "]},"metadata":{},"execution_count":25}]},{"cell_type":"code","source":["plt.plot(data_c['c0'],label = 'c0')\n","plt.plot(data_c['c1'],label = 'c1')\n","plt.plot(data_c['c2'],label = 'c2')\n","plt.plot(data_c['c3'],label = 'c3')\n","plt.xlabel('month')\n","plt.ylabel('months buy_am')\n","plt.legend()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":390},"id":"9smGkkdWQavM","executionInfo":{"status":"ok","timestamp":1660280730978,"user_tz":-540,"elapsed":716,"user":{"displayName":"강태욱","userId":"11730563988901671307"}},"outputId":"9e1b88e0-a0fe-426d-8305-6721b610d533"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["<matplotlib.legend.Legend at 0x7ffac3f78e10>"]},"metadata":{},"execution_count":26},{"output_type":"display_data","data":{"text/plain":["<Figure size 576x396 with 1 Axes>"],"image/png":"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6e/O6XSyfv16Vq9ezaOPPsq7777L008/zc6dO9FoNKxevZq3336bQ4cOcffdd+N2u7nmmmtYsWIFW7Zs4fe//z0A9957L7NmzeIb3/jGafV4vV7uvvtuamtr8Xg8/OQnP2HWrFkUFRUxffp0PvjgA9RqNddffz3r16+npaWFn//85zQ1NREfH09tbW1Ea1qzZg1qtRqfz0dWVhZVVVXExsZe8O+utLQUh8OB1WqluLiYTZs20dTUxAMPPADArFmz+POf/8zMmTPxer3ceeedfP755+Tl5fGb3/yG5cuXc+WVVzJr1iy2bt3KG2+8QUJCAiNGjAht0M2dO5fnn3+e+Pj402qrqanhrrvuCn1+Dz/8MOnp6VRWVtLe3s7WrVupqqqio6ODHTt20NTUdNpnfiFqysrKYvbs2RQWFrJ9+3Yuv/xyFEXhgw8+YObMmdx55529fvYQRV3rJ0+eDPtA7HY79fX1JCYmUlxczPXXX09xcXGvzx01ahQdHR3U1NQAsG3bNubOndvrvO3t7QwbNoy//vWvbNiwgSeeeCL0mFar5S9/+Qtjxozh008/5bnnnmPs2LHs2rXrtOVEqq5du3ZRXFzMmDFjePzxx5k5cyYajSbin9OYMWOYN28ed955J/fcc09EP6OumtxuN7NmzQpbRiRrWr58OYqicMstt3DTTTfxwQcfRLyma6+9ltjYWG655RZuvvlmtm/fHvGauv6eXnzxRdLS0khKSgJg7NixbNiwgYKCAjZv3tzr61x22WWhwPH7/XzyySdcfvnlvc7b2NjIZZddxvr163niiSfCeiOSkpL461//is/no7GxkX/+85+0t7dTWFjIwoULufvuuyNe04oVK3C5XOzbt4+jR49SXl6O0+m84N/dunXryM3NDXWnjxkzhqamplCPakJCAvX19QAcOXKEZcuWsWnTJsrKyjhw4ECvr3ndddfx+uuvA3D48GEyMzN7DUyAuro6br/9doqLi/nOd77Dhg0b0Gq1VFVVkZ+fz6233kpxcTHXXHMNL774Ih6PJ+z5F6omCHTlz58/nxdffJHi4mKuuuoqXnzxRV566aVel9MlalrkPXWdx2b69OkATJgwgffff/+0FXOXa6+9ltdff525c+disVhITEzsdT69Xk9jYyMLFixAp9PhdDpDj02YMAGA5ORksrOzgcAKrbm5+bTlRLout9vNp59+yiuvvMLSpUsjXk9iYiI//OEPyc3N5a677sJqtUa0pldffZWMjAz0en3YMiJZ04gRI7j44ou58sorufjii1m0aBGpqakRranrsQULFjBt2jQWLVpERkbGgPh72rZtG3fccUdovq6axo8fz86dOykoKDjtdTQaDVdccQXvvvsuSUlJXHzxxWfcRRcXF8eePXvYuHEjarUal8vVa015eXls3ryZuLg4fve73xEXFxfaWI1kTV/72tdISkpi+fLlTJkyhezsbDweT8S+u679zomJiWHnDu9+Oysri7S0tNBnduzYsV5fs2tjwOFw8M4773DNNdf0Oh8ENnAefPBBnnrqKZqamsjPzwfAYrFgt9vR6XSYTCby8/PRarWnndf8Qtc0atQogLCa/H7/GZcFURTkycnJnDx5MjRdV1dHcnJy2ClbVSrVaadw9Xq9AFx99dX85Cc/wWg0cvXVV5/xdXbs2MGHH35IcXExOp2OSZMmhR7TaDS93u7t5HiRrOv9999n165d/PjHPw510UayntLSUlpaWlAUhXHjxuHz+XA4HBGtadu2bZw4cYLVq1fT0dFBTEwMSUlJEa0pJSUlFFRZWVkkJiZSW1sb0ZoSEhJITk5GrVaTlZWF2WyO+HfX5ejRo2Hzna2mrnoArr/+etauXcuwYcPOWtOWLVtobGxkw4YNuFwuvvvd756xpk8++YSEhAQURSE3N5e6ujo0Gk1EawIYPXo03/ve95g+fTqzZ88mJSUlYt9d91OMxsTE0NbWhsFgoLa2NrRfumctZ/vMrr76at588022b9/OmjVrzljfk08+yWWXXcZNN93EP//5T7Zt23ZabRDoPejNQKypp6jpWr/00kt54403ACgrKyM5ORmz2czOnTsB+Oyzz8jOzsZisVBXVwfA/v37Q1uBdrsdq9XK5s2bmTNnzhlfx+l0kpqaik6n45133sHn832pq65Fqq62tjYeeeQR5syZg8lking9Xa9dWloKBHaReDwe4uPjI1rT448/zrXXXsvSpUuZN28eS5cuRavVRrSmv//97+zZsweA+vp6GhoaSElJiWhNl112GdXV1fj9fpxO54D47iAwWCkmJias5dpV065du06rqaSkJDTfuHHjqK2tZffu3UydOvWsNWVkZKBWq3nrrbfOWs/w4cNpbGwEoLKyErPZjEajiWhN+/fvD/3fvffee+Tl5aFWqyP+3QHk5OSE1udvvvlmaFfCiRMnqKurw+/3s2fPHkaNGoXZbA51vXf/zK6++mpefvllkpKSMBqNZ60vKysLRVF455136OzsPGttPQ3EmnqKmiCfPHky+fn5LFiwgAcffJAVK1YA0NDQwG233caWLVtYtGgRubm5mEwmFixYwObNmxk2bFhoGVdeeSUpKSlYLJYzvs7XvvY1jh8/zsKFCykvL+eKK65g5cqVZ5z/5MmTPPPMM7zyyiusW7eOoqIiXC5XxOravXs3TqeTrVu38swzz1BUVERVVVVEP6cFCxbQ1tbG008/zQ9+8APuv/9+1Gp1xL+73kSypsLCQmpqanj66adZunQpK1euRKfTRbSmlJQURowYwZo1a1iyZAn33nvvgPjuPB7Pacs7dOgQ3//+9zlw4ADXXXcdM2bM4NixYxQVFXH06NGwVtSll15KQUHBWS/C9M1vfpN//etfLF68GKPRSGpqKn/84x97nXf+/Pm0trby0EMPsWzZslDtkaxpzJgxKIrCypUrefrpp/n1r38NXPi/8dLSUl577TVKSkpYt24dr732Gt/4xjd49dVXufnmm3G5XFx//fUA5Obm8oc//IH58+czadIkcnJyuO6663j22We59dZbw1qoiYmJmEyms/YWQOC7WbVqFbfddhvf/va32bFjB+vXr6e5uTm03m5ubmbNmjUUFRWhKApLlizhkUceuaA1/fvf/z7rc85KGUJ+9atfKdu3b490GacZaHUNtHoURWrqK6np3Px+v7J48WLl888/j3QpIQOxJkUZeN9ddw0NDcoNN9yg+Hy+SJcSEqmaomYf+VfR3t5OUVER48eP55JLLgFg48aNbNmy5bR5f/nLX4bt4xlKdQ20eqQmqel8q6io4Kc//SlXXXUVw4cPB+CPf/wjH3300Wnz/va3v70g52AYiDUNxO+uu7fffpsnn3ySX//616F973fccUdo90YXi8Vy1n3Vg6UmuYypEEIIEcWiZh+5EEIIIU4nQS6EEEJEMQlyIYQQIopJkAshvrTDhw9TVlYGwPLly9m0aVOEKxJi6JEgF0J8aW+99RZ79+6NdBlCDGlD4vAzIUTgeud/+tOfSE1NZc+ePUycOJGxY8fy1ltv4XK5WLt2Lfv372f16tUYDAaMRiOrVq0iJSWFwsJCFi1axHvvvUdFRQUPPPAABoOB9evXY7FYMBgMABw4cIAf/ehHfP7559x444384Ac/iPC7FmLwkxa5EEPI7t27ufvuu3nppZf4xz/+QVxcHMXFxeTn5/Pqq69y77338tRTT1FcXMzMmTN5/PHHQ8/V6/X8+c9/5sc//jHr1q1j0qRJXH755dx2222hC0Q0NDTwpz/9ieeee+6CHb8rxFAnQS7EEDJq1ChsNht6vR6bzRY6kUdKSgper5eEhARSU1MBmDZtWujc713TAOnp6aed5KLnPKmpqXg8Hnw+X3++HSEEEuRCDCk9r67UfXrfvn1hjymKEnbe7+7nlD7TeaR6Xq1JzjclRP+TIBdCADBixAgaGhqoqqoCYPv27UycOPGsz1GpVF/5yk1CiK9GBrsJIQAwGAw89NBD/OIXvyAmJgaTycRDDz101udccsklPPLII9LyFiKC5FzrQgghRBSTrnUhhBAiikmQCyGEEFFMglwIIYSIYhLkQgghRBSTIBdCCCGimAS5EEIIEcUkyIUQQogoJkEuhBBCRLH/DwP1YXuJir6JAAAAAElFTkSuQmCC\n"},"metadata":{}}]},{"cell_type":"code","source":[],"metadata":{"id":"7F06ii7tZYYy"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["data_c.to_excel(excel_writer='/content/drive/MyDrive/Colab Notebooks/롯데멤버스/군집화월별매출액.xlsx')"],"metadata":{"id":"k2RyFM5HaMPk"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"55ChsaJWc6c1"},"execution_count":null,"outputs":[]}]}